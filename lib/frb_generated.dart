// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'db.dart';
import 'event_bus.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'multimint.dart';
import 'nostr.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1878611510;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'ecashapp',
        ioDirectory: 'rust/ecashapp/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  ClientConfig crateDbFederationConfigAutoAccessorGetClientConfig({
    required FederationConfig that,
  });

  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  });

  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  });

  String? crateDbFederationConfigAutoAccessorGetNetwork({
    required FederationConfig that,
  });

  void crateDbFederationConfigAutoAccessorSetClientConfig({
    required FederationConfig that,
    required ClientConfig clientConfig,
  });

  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  });

  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  });

  void crateDbFederationConfigAutoAccessorSetNetwork({
    required FederationConfig that,
    String? network,
  });

  List<Guardian> crateMultimintFederationMetaAutoAccessorGetGuardians({
    required FederationMeta that,
  });

  BigInt crateMultimintFederationMetaAutoAccessorGetLastUpdated({
    required FederationMeta that,
  });

  String? crateMultimintFederationMetaAutoAccessorGetLnaddressApi({
    required FederationMeta that,
  });

  String? crateMultimintFederationMetaAutoAccessorGetPicture({
    required FederationMeta that,
  });

  String? crateMultimintFederationMetaAutoAccessorGetRecurringdApi({
    required FederationMeta that,
  });

  FederationSelector crateMultimintFederationMetaAutoAccessorGetSelector({
    required FederationMeta that,
  });

  String? crateMultimintFederationMetaAutoAccessorGetWelcome({
    required FederationMeta that,
  });

  void crateMultimintFederationMetaAutoAccessorSetGuardians({
    required FederationMeta that,
    required List<Guardian> guardians,
  });

  void crateMultimintFederationMetaAutoAccessorSetLastUpdated({
    required FederationMeta that,
    required BigInt lastUpdated,
  });

  void crateMultimintFederationMetaAutoAccessorSetLnaddressApi({
    required FederationMeta that,
    String? lnaddressApi,
  });

  void crateMultimintFederationMetaAutoAccessorSetPicture({
    required FederationMeta that,
    String? picture,
  });

  void crateMultimintFederationMetaAutoAccessorSetRecurringdApi({
    required FederationMeta that,
    String? recurringdApi,
  });

  void crateMultimintFederationMetaAutoAccessorSetSelector({
    required FederationMeta that,
    required FederationSelector selector,
  });

  void crateMultimintFederationMetaAutoAccessorSetWelcome({
    required FederationMeta that,
    String? welcome,
  });

  FederationId crateMultimintFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  });

  String crateMultimintFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  });

  String? crateMultimintFederationSelectorAutoAccessorGetNetwork({
    required FederationSelector that,
  });

  void crateMultimintFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  });

  void crateMultimintFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  });

  void crateMultimintFederationSelectorAutoAccessorSetNetwork({
    required FederationSelector that,
    String? network,
  });

  String crateDbLightningAddressConfigAutoAccessorGetAuthenticationToken({
    required LightningAddressConfig that,
  });

  String crateDbLightningAddressConfigAutoAccessorGetDomain({
    required LightningAddressConfig that,
  });

  SafeUrl crateDbLightningAddressConfigAutoAccessorGetLnAddressApi({
    required LightningAddressConfig that,
  });

  String crateDbLightningAddressConfigAutoAccessorGetLnurl({
    required LightningAddressConfig that,
  });

  SafeUrl crateDbLightningAddressConfigAutoAccessorGetRecurringdApi({
    required LightningAddressConfig that,
  });

  String crateDbLightningAddressConfigAutoAccessorGetUsername({
    required LightningAddressConfig that,
  });

  void crateDbLightningAddressConfigAutoAccessorSetAuthenticationToken({
    required LightningAddressConfig that,
    required String authenticationToken,
  });

  void crateDbLightningAddressConfigAutoAccessorSetDomain({
    required LightningAddressConfig that,
    required String domain,
  });

  void crateDbLightningAddressConfigAutoAccessorSetLnAddressApi({
    required LightningAddressConfig that,
    required SafeUrl lnAddressApi,
  });

  void crateDbLightningAddressConfigAutoAccessorSetLnurl({
    required LightningAddressConfig that,
    required String lnurl,
  });

  void crateDbLightningAddressConfigAutoAccessorSetRecurringdApi({
    required LightningAddressConfig that,
    required SafeUrl recurringdApi,
  });

  void crateDbLightningAddressConfigAutoAccessorSetUsername({
    required LightningAddressConfig that,
    required String username,
  });

  FederationId crateDbLightningAddressKeyAutoAccessorGetFederationId({
    required LightningAddressKey that,
  });

  void crateDbLightningAddressKeyAutoAccessorSetFederationId({
    required LightningAddressKey that,
    required FederationId federationId,
  });

  Future<void> crateMultimintMultimintAckSeedPhrase({required Multimint that});

  Future<String> crateMultimintMultimintAllocateDepositAddress({
    required Multimint that,
    required FederationId federationId,
  });

  Future<(ReissueExternalNotesState, BigInt?)>
  crateMultimintMultimintAwaitEcashReissue({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<SpendOobState> crateMultimintMultimintAwaitEcashSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<(FinalReceiveOperationState, BigInt)>
  crateMultimintMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<LightningSendOutcome> crateMultimintMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<String> crateMultimintMultimintAwaitWithdraw({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<BigInt> crateMultimintMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  });

  Future<WithdrawFeesResponse> crateMultimintMultimintCalculateWithdrawFees({
    required Multimint that,
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
  });

  Future<bool> crateMultimintMultimintCheckEcashSpent({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  });

  Future<LNAddressStatus> crateMultimintMultimintCheckLnAddressAvailability({
    required Multimint that,
    required String username,
    required String domain,
    required String lnAddressApi,
    required String recurringdApi,
    required FederationId federationId,
  });

  Future<bool> crateMultimintMultimintContainsClient({
    required Multimint that,
    required FederationId federationId,
  });

  Future<List<(FederationSelector, bool)>> crateMultimintMultimintFederations({
    required Multimint that,
  });

  Future<List<(String, BigInt, BigInt?)>> crateMultimintMultimintGetAddresses({
    required Multimint that,
    required FederationId federationId,
  });

  Future<List<String>> crateMultimintMultimintGetAllInviteCodes({
    required Multimint that,
  });

  Future<BigInt?> crateMultimintMultimintGetBtcPrice({required Multimint that});

  Future<FederationMeta> crateMultimintMultimintGetCachedFederationMeta({
    required Multimint that,
    String? invite,
    FederationId? federationId,
  });

  Future<DisplaySetting> crateMultimintMultimintGetDisplaySetting({
    required Multimint that,
  });

  Future<String> crateMultimintMultimintGetInviteCode({
    required Multimint that,
    required FederationId federationId,
    required int peer,
  });

  Future<LightningAddressConfig?> crateMultimintMultimintGetLnAddressConfig({
    required Multimint that,
    required FederationId federationId,
  });

  Future<BigInt> crateMultimintMultimintGetMaxWithdrawableAmount({
    required Multimint that,
    required FederationId federationId,
    required String address,
  });

  Future<List<String>> crateMultimintMultimintGetMnemonic({
    required Multimint that,
  });

  Future<List<(BigInt, BigInt)>> crateMultimintMultimintGetNoteSummary({
    required Multimint that,
    required FederationId federationId,
  });

  Future<RecoveryProgress> crateMultimintMultimintGetRecoveryProgress({
    required Multimint that,
    required FederationId federationId,
    required int moduleId,
  });

  Future<bool> crateMultimintMultimintHasSeedPhraseAck({
    required Multimint that,
  });

  Future<FederationSelector> crateMultimintMultimintJoinFederation({
    required Multimint that,
    required String invite,
    required bool recover,
  });

  Future<void> crateMultimintMultimintLeaveFederation({
    required Multimint that,
    required FederationId federationId,
  });

  Future<List<FedimintGateway>> crateMultimintMultimintListGateways({
    required Multimint that,
    required FederationId federationId,
  });

  Future<void> crateMultimintMultimintMonitorDepositAddress({
    required Multimint that,
    required FederationId federationId,
    required String address,
  });

  Future<Multimint> crateMultimintMultimintNew({
    required Database db,
    required MultimintCreation creationType,
  });

  Future<BigInt> crateMultimintMultimintParseEcash({
    required Multimint that,
    required FederationId federationId,
    required OobNotes notes,
  });

  Future<(Bolt11Invoice, OperationId)> crateMultimintMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  });

  Future<void> crateMultimintMultimintRecheckAddress({
    required Multimint that,
    required FederationId federationId,
    required BigInt tweakIdx,
  });

  Future<void> crateMultimintMultimintRegisterLnAddress({
    required Multimint that,
    required FederationId federationId,
    required String recurringdApi,
    required String lnAddressApi,
    required String username,
    required String domain,
  });

  Future<OperationId> crateMultimintMultimintReissueEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  });

  Future<void> crateMultimintMultimintRejoinFromBackupInvites({
    required Multimint that,
    required List<String> backupInviteCodes,
  });

  Future<(String, BigInt, bool)> crateMultimintMultimintSelectReceiveGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  });

  Future<(String, BigInt, bool)> crateMultimintMultimintSelectSendGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  });

  Future<OperationId> crateMultimintMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
    required BigInt amountWithFees,
    String? lnAddress,
  });

  Future<(OperationId, String, BigInt)> crateMultimintMultimintSendEcash({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<void> crateMultimintMultimintSetDisplaySetting({
    required Multimint that,
    required DisplaySetting displaySetting,
  });

  Future<List<Transaction>> crateMultimintMultimintTransactions({
    required Multimint that,
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  });

  Future<List<Utxo>> crateMultimintMultimintWalletSummary({
    required Multimint that,
    String? invite,
    FederationId? federationId,
  });

  Future<OperationId> crateMultimintMultimintWithdrawToAddress({
    required Multimint that,
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
    required PegOutFees pegOutFees,
  });

  Future<void> crateNostrNostrClientBackupInviteCodes({
    required NostrClient that,
    required List<String> inviteCodes,
  });

  Future<List<String>> crateNostrNostrClientGetBackupInviteCodes({
    required NostrClient that,
  });

  Future<List<(FederationSelector, NWCConnectionInfo)>>
  crateNostrNostrClientGetNwcConnectionInfo({required NostrClient that});

  Future<List<PublicFederation>> crateNostrNostrClientGetPublicFederations({
    required NostrClient that,
    required bool forceUpdate,
  });

  Future<List<(String, bool)>> crateNostrNostrClientGetRelays({
    required NostrClient that,
  });

  Future<void> crateNostrNostrClientInsertRelay({
    required NostrClient that,
    required String relayUri,
  });

  Future<NostrClient> crateNostrNostrClientNew({
    required Database db,
    required List<String> recoverRelays,
  });

  Future<void> crateNostrNostrClientRemoveRelay({
    required NostrClient that,
    required String relayUri,
  });

  Future<NWCConnectionInfo> crateNostrNostrClientSetNwcConnectionInfo({
    required NostrClient that,
    required FederationId federationId,
    required String relay,
  });

  String? crateNostrPublicFederationAutoAccessorGetAbout({
    required PublicFederation that,
  });

  FederationId crateNostrPublicFederationAutoAccessorGetFederationId({
    required PublicFederation that,
  });

  String crateNostrPublicFederationAutoAccessorGetFederationName({
    required PublicFederation that,
  });

  List<String> crateNostrPublicFederationAutoAccessorGetInviteCodes({
    required PublicFederation that,
  });

  List<String> crateNostrPublicFederationAutoAccessorGetModules({
    required PublicFederation that,
  });

  String crateNostrPublicFederationAutoAccessorGetNetwork({
    required PublicFederation that,
  });

  String? crateNostrPublicFederationAutoAccessorGetPicture({
    required PublicFederation that,
  });

  void crateNostrPublicFederationAutoAccessorSetAbout({
    required PublicFederation that,
    String? about,
  });

  void crateNostrPublicFederationAutoAccessorSetFederationId({
    required PublicFederation that,
    required FederationId federationId,
  });

  void crateNostrPublicFederationAutoAccessorSetFederationName({
    required PublicFederation that,
    required String federationName,
  });

  void crateNostrPublicFederationAutoAccessorSetInviteCodes({
    required PublicFederation that,
    required List<String> inviteCodes,
  });

  void crateNostrPublicFederationAutoAccessorSetModules({
    required PublicFederation that,
    required List<String> modules,
  });

  void crateNostrPublicFederationAutoAccessorSetNetwork({
    required PublicFederation that,
    required String network,
  });

  void crateNostrPublicFederationAutoAccessorSetPicture({
    required PublicFederation that,
    String? picture,
  });

  BigInt crateMultimintWithdrawFeesResponseAutoAccessorGetFeeAmount({
    required WithdrawFeesResponse that,
  });

  double crateMultimintWithdrawFeesResponseAutoAccessorGetFeeRateSatsPerVb({
    required WithdrawFeesResponse that,
  });

  PegOutFees crateMultimintWithdrawFeesResponseAutoAccessorGetPegOutFees({
    required WithdrawFeesResponse that,
  });

  int crateMultimintWithdrawFeesResponseAutoAccessorGetTxSizeVbytes({
    required WithdrawFeesResponse that,
  });

  void crateMultimintWithdrawFeesResponseAutoAccessorSetFeeAmount({
    required WithdrawFeesResponse that,
    required BigInt feeAmount,
  });

  void crateMultimintWithdrawFeesResponseAutoAccessorSetFeeRateSatsPerVb({
    required WithdrawFeesResponse that,
    required double feeRateSatsPerVb,
  });

  void crateMultimintWithdrawFeesResponseAutoAccessorSetPegOutFees({
    required WithdrawFeesResponse that,
    required PegOutFees pegOutFees,
  });

  void crateMultimintWithdrawFeesResponseAutoAccessorSetTxSizeVbytes({
    required WithdrawFeesResponse that,
    required int txSizeVbytes,
  });

  Future<void> crateAckSeedPhrase();

  Future<void> crateAddRecoveryRelay({required String relay});

  Future<String> crateAllocateDepositAddress({
    required FederationId federationId,
  });

  Future<(ReissueExternalNotesState, BigInt?)> crateAwaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<(FinalReceiveOperationState, BigInt)> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<LightningSendOutcome> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<String> crateAwaitWithdraw({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<void> crateBackupInviteCodes();

  Future<BigInt> crateBalance({required FederationId federationId});

  Future<WithdrawFeesResponse> crateCalculateWithdrawFees({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
  });

  Future<bool> crateCheckEcashSpent({
    required FederationId federationId,
    required String ecash,
  });

  Future<LNAddressStatus> crateCheckLnAddressAvailability({
    required String username,
    required String domain,
    required String lnAddressApi,
    required String recurringdApi,
    required FederationId federationId,
  });

  Future<(String, String)> crateClaimRandomLnAddress({
    required FederationId federationId,
    required String lnAddressApi,
    required String recurringdApi,
  });

  Future<void> crateCreateMultimintFromWords({
    required String path,
    required List<String> words,
  });

  Future<void> crateCreateNewMultimint({required String path});

  Future<String> crateFederationIdToString({
    required FederationId federationId,
  });

  Future<List<(FederationSelector, bool)>> crateFederations();

  Future<List<(String, BigInt, BigInt?)>> crateGetAddresses({
    required FederationId federationId,
  });

  Future<BigInt?> crateGetBtcPrice();

  Future<DisplaySetting> crateGetDisplaySetting();

  Future<EventBusMultimintEvent> crateGetEventBus();

  Future<FederationMeta> crateGetFederationMeta({
    String? inviteCode,
    FederationId? federationId,
  });

  Future<String> crateGetInviteCode({
    required FederationId federationId,
    required int peer,
  });

  Future<String> crateGetInvoiceFromLnaddressOrLnurl({
    required BigInt amountMsats,
    required String lnaddressOrLnurl,
  });

  Future<LightningAddressConfig?> crateGetLnAddressConfig({
    required FederationId federationId,
  });

  Future<BigInt> crateGetMaxWithdrawableAmount({
    required FederationId federationId,
    required String address,
  });

  Future<List<String>> crateGetMnemonic();

  Future<(int, int)> crateGetModuleRecoveryProgress({
    required FederationId federationId,
    required int moduleId,
  });

  Future<List<(BigInt, BigInt)>> crateGetNoteSummary({
    required FederationId federationId,
  });

  Future<List<(FederationSelector, NWCConnectionInfo)>>
  crateGetNwcConnectionInfo();

  Future<List<(String, bool)>> crateGetRelays();

  Future<bool> crateHasSeedPhraseAck();

  Future<void> crateInsertRelay({required String relayUri});

  Future<FederationSelector> crateJoinFederation({
    required String inviteCode,
    required bool recover,
  });

  Future<void> crateLeaveFederation({required FederationId federationId});

  Future<List<PublicFederation>> crateListFederationsFromNostr({
    required bool forceUpdate,
  });

  Future<List<FedimintGateway>> crateListGateways({
    required FederationId federationId,
  });

  Future<List<String>> crateListLnAddressDomains({
    required String lnAddressApi,
  });

  Future<void> crateLoadMultimint({required String path});

  Future<(ParsedText, FederationSelector)> crateParseScannedTextForFederation({
    required String text,
    required FederationSelector federation,
  });

  Future<(ParsedText, FederationSelector?)> crateParsedScannedText({
    required String text,
  });

  Future<PaymentPreview> cratePaymentPreview({
    required FederationId federationId,
    required String bolt11,
  });

  Future<(String, OperationId, String, String, BigInt)> crateReceive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required String gateway,
    required bool isLnv2,
  });

  Future<void> crateRecheckAddress({
    required FederationId federationId,
    required BigInt tweakIdx,
  });

  Future<void> crateRegisterLnAddress({
    required FederationId federationId,
    required String recurringdApi,
    required String lnAddressApi,
    required String username,
    required String domain,
  });

  Future<OperationId> crateReissueEcash({
    required FederationId federationId,
    required String ecash,
  });

  Future<void> crateRejoinFromBackupInvites();

  Future<void> crateRemoveRelay({required String relayUri});

  Future<(String, BigInt, bool)> crateSelectReceiveGateway({
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
    required String gateway,
    required bool isLnv2,
    required BigInt amountWithFees,
    String? lnAddress,
  });

  Future<(OperationId, String, BigInt)> crateSendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<OperationId> crateSendLnaddress({
    required FederationId federationId,
    required BigInt amountMsats,
    required String address,
  });

  Future<void> crateSetDisplaySetting({required DisplaySetting displaySetting});

  Future<NWCConnectionInfo> crateSetNwcConnectionInfo({
    required FederationId federationId,
    required String relay,
  });

  Stream<DepositEventKind> crateSubscribeDeposits({
    required FederationId federationId,
  });

  Stream<MultimintEvent> crateSubscribeMultimintEvents();

  Stream<(int, int)> crateSubscribeRecoveryProgress({
    required FederationId federationId,
    required int moduleId,
  });

  Future<List<Transaction>> crateTransactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  });

  Future<List<Utxo>> crateWalletSummary({
    String? invite,
    FederationId? federationId,
  });

  Future<OperationId> crateWithdrawToAddress({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
    required PegOutFees pegOutFees,
  });

  Future<List<String>> crateWordList();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Amount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Amount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AmountPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Bolt11Invoice;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Bolt11Invoice;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_Bolt11InvoicePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConnectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Database;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Database;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DatabasePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EventBusMultimintEvent;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EventBusMultimintEvent;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EventBusMultimintEventPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FederationIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationMeta;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationMeta;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationMetaPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationSelectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LightningAddressConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LightningAddressConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_LightningAddressConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LightningAddressKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LightningAddressKey;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_LightningAddressKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MultimintPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NostrClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NostrClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NostrClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OobNotes;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OobNotes;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OobNotesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OperationIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PegOutFees;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PegOutFees;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PegOutFeesPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicFederation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicFederation;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_PublicFederationPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecoveryProgress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecoveryProgress;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_RecoveryProgressPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReissueExternalNotesState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReissueExternalNotesState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ReissueExternalNotesStatePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SafeUrl;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SafeUrl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SafeUrlPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SpendOobState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SpendOobState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SpendOobStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WithdrawFeesResponse;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WithdrawFeesResponse;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_WithdrawFeesResponsePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  ClientConfig crateDbFederationConfigAutoAccessorGetClientConfig({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetClientConfigConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetClientConfigConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_client_config",
        argNames: ["that"],
      );

  @override
  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_connector",
        argNames: ["that"],
      );

  @override
  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  String? crateDbFederationConfigAutoAccessorGetNetwork({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetClientConfig({
    required FederationConfig that,
    required ClientConfig clientConfig,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            clientConfig,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetClientConfigConstMeta,
        argValues: [that, clientConfig],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetClientConfigConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_client_config",
        argNames: ["that", "clientConfig"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
            connector,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta,
        argValues: [that, connector],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_connector",
        argNames: ["that", "connector"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetNetwork({
    required FederationConfig that,
    String? network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_opt_String(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  List<Guardian> crateMultimintFederationMetaAutoAccessorGetGuardians({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_guardian,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorGetGuardiansConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetGuardiansConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_guardians",
        argNames: ["that"],
      );

  @override
  BigInt crateMultimintFederationMetaAutoAccessorGetLastUpdated({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorGetLastUpdatedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetLastUpdatedConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_last_updated",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationMetaAutoAccessorGetLnaddressApi({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorGetLnaddressApiConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetLnaddressApiConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_lnaddress_api",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationMetaAutoAccessorGetPicture({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintFederationMetaAutoAccessorGetPictureConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_picture",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationMetaAutoAccessorGetRecurringdApi({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorGetRecurringdApiConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetRecurringdApiConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_recurringd_api",
        argNames: ["that"],
      );

  @override
  FederationSelector crateMultimintFederationMetaAutoAccessorGetSelector({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorGetSelectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetSelectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_selector",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationMetaAutoAccessorGetWelcome({
    required FederationMeta that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintFederationMetaAutoAccessorGetWelcomeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorGetWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_get_welcome",
        argNames: ["that"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetGuardians({
    required FederationMeta that,
    required List<Guardian> guardians,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_list_guardian(guardians, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorSetGuardiansConstMeta,
        argValues: [that, guardians],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetGuardiansConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_guardians",
        argNames: ["that", "guardians"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetLastUpdated({
    required FederationMeta that,
    required BigInt lastUpdated,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_u_64(lastUpdated, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorSetLastUpdatedConstMeta,
        argValues: [that, lastUpdated],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetLastUpdatedConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_last_updated",
        argNames: ["that", "lastUpdated"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetLnaddressApi({
    required FederationMeta that,
    String? lnaddressApi,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_opt_String(lnaddressApi, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorSetLnaddressApiConstMeta,
        argValues: [that, lnaddressApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetLnaddressApiConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_lnaddress_api",
        argNames: ["that", "lnaddressApi"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetPicture({
    required FederationMeta that,
    String? picture,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_opt_String(picture, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintFederationMetaAutoAccessorSetPictureConstMeta,
        argValues: [that, picture],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_picture",
        argNames: ["that", "picture"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetRecurringdApi({
    required FederationMeta that,
    String? recurringdApi,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_opt_String(recurringdApi, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorSetRecurringdApiConstMeta,
        argValues: [that, recurringdApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetRecurringdApiConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_recurringd_api",
        argNames: ["that", "recurringdApi"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetSelector({
    required FederationMeta that,
    required FederationSelector selector,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            selector,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationMetaAutoAccessorSetSelectorConstMeta,
        argValues: [that, selector],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetSelectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_selector",
        argNames: ["that", "selector"],
      );

  @override
  void crateMultimintFederationMetaAutoAccessorSetWelcome({
    required FederationMeta that,
    String? welcome,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
            that,
            serializer,
          );
          sse_encode_opt_String(welcome, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintFederationMetaAutoAccessorSetWelcomeConstMeta,
        argValues: [that, welcome],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationMetaAutoAccessorSetWelcomeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationMeta_auto_accessor_set_welcome",
        argNames: ["that", "welcome"],
      );

  @override
  FederationId crateMultimintFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  String crateMultimintFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationSelectorAutoAccessorGetNetwork({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetNetwork({
    required FederationSelector that,
    String? network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_opt_String(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  String crateDbLightningAddressConfigAutoAccessorGetAuthenticationToken({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorGetAuthenticationTokenConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetAuthenticationTokenConstMeta =>
      const TaskConstMeta(
        debugName:
            "LightningAddressConfig_auto_accessor_get_authentication_token",
        argNames: ["that"],
      );

  @override
  String crateDbLightningAddressConfigAutoAccessorGetDomain({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbLightningAddressConfigAutoAccessorGetDomainConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetDomainConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_get_domain",
        argNames: ["that"],
      );

  @override
  SafeUrl crateDbLightningAddressConfigAutoAccessorGetLnAddressApi({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorGetLnAddressApiConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetLnAddressApiConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_get_ln_address_api",
        argNames: ["that"],
      );

  @override
  String crateDbLightningAddressConfigAutoAccessorGetLnurl({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbLightningAddressConfigAutoAccessorGetLnurlConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetLnurlConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_get_lnurl",
        argNames: ["that"],
      );

  @override
  SafeUrl crateDbLightningAddressConfigAutoAccessorGetRecurringdApi({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorGetRecurringdApiConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetRecurringdApiConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_get_recurringd_api",
        argNames: ["that"],
      );

  @override
  String crateDbLightningAddressConfigAutoAccessorGetUsername({
    required LightningAddressConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorGetUsernameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorGetUsernameConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_get_username",
        argNames: ["that"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetAuthenticationToken({
    required LightningAddressConfig that,
    required String authenticationToken,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_String(authenticationToken, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorSetAuthenticationTokenConstMeta,
        argValues: [that, authenticationToken],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetAuthenticationTokenConstMeta =>
      const TaskConstMeta(
        debugName:
            "LightningAddressConfig_auto_accessor_set_authentication_token",
        argNames: ["that", "authenticationToken"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetDomain({
    required LightningAddressConfig that,
    required String domain,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_String(domain, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbLightningAddressConfigAutoAccessorSetDomainConstMeta,
        argValues: [that, domain],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetDomainConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_set_domain",
        argNames: ["that", "domain"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetLnAddressApi({
    required LightningAddressConfig that,
    required SafeUrl lnAddressApi,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            lnAddressApi,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorSetLnAddressApiConstMeta,
        argValues: [that, lnAddressApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetLnAddressApiConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_set_ln_address_api",
        argNames: ["that", "lnAddressApi"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetLnurl({
    required LightningAddressConfig that,
    required String lnurl,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_String(lnurl, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbLightningAddressConfigAutoAccessorSetLnurlConstMeta,
        argValues: [that, lnurl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetLnurlConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_set_lnurl",
        argNames: ["that", "lnurl"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetRecurringdApi({
    required LightningAddressConfig that,
    required SafeUrl recurringdApi,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            recurringdApi,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorSetRecurringdApiConstMeta,
        argValues: [that, recurringdApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetRecurringdApiConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_set_recurringd_api",
        argNames: ["that", "recurringdApi"],
      );

  @override
  void crateDbLightningAddressConfigAutoAccessorSetUsername({
    required LightningAddressConfig that,
    required String username,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressConfigAutoAccessorSetUsernameConstMeta,
        argValues: [that, username],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressConfigAutoAccessorSetUsernameConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressConfig_auto_accessor_set_username",
        argNames: ["that", "username"],
      );

  @override
  FederationId crateDbLightningAddressKeyAutoAccessorGetFederationId({
    required LightningAddressKey that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressKeyAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressKeyAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressKey_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  void crateDbLightningAddressKeyAutoAccessorSetFederationId({
    required LightningAddressKey that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbLightningAddressKeyAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbLightningAddressKeyAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "LightningAddressKey_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  Future<void> crateMultimintMultimintAckSeedPhrase({required Multimint that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintAckSeedPhraseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAckSeedPhraseConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_ack_seed_phrase",
        argNames: ["that"],
      );

  @override
  Future<String> crateMultimintMultimintAllocateDepositAddress({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAllocateDepositAddressConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAllocateDepositAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_allocate_deposit_address",
        argNames: ["that", "federationId"],
      );

  @override
  Future<(ReissueExternalNotesState, BigInt?)>
  crateMultimintMultimintAwaitEcashReissue({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_reissue_external_notes_state_opt_box_autoadd_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitEcashReissueConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitEcashReissueConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_ecash_reissue",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<SpendOobState> crateMultimintMultimintAwaitEcashSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitEcashSendConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitEcashSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_ecash_send",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<(FinalReceiveOperationState, BigInt)>
  crateMultimintMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_final_receive_operation_state_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitReceiveConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_receive",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<LightningSendOutcome> crateMultimintMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_lightning_send_outcome,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintAwaitSendConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_send",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<String> crateMultimintMultimintAwaitWithdraw({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitWithdrawConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitWithdrawConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_withdraw",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<BigInt> crateMultimintMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintBalanceConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_balance",
        argNames: ["that", "federationId"],
      );

  @override
  Future<WithdrawFeesResponse> crateMultimintMultimintCalculateWithdrawFees({
    required Multimint that,
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(amountSats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintCalculateWithdrawFeesConstMeta,
        argValues: [that, federationId, address, amountSats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintCalculateWithdrawFeesConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_calculate_withdraw_fees",
        argNames: ["that", "federationId", "address", "amountSats"],
      );

  @override
  Future<bool> crateMultimintMultimintCheckEcashSpent({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 52,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintCheckEcashSpentConstMeta,
        argValues: [that, federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintCheckEcashSpentConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_check_ecash_spent",
        argNames: ["that", "federationId", "ecash"],
      );

  @override
  Future<LNAddressStatus> crateMultimintMultimintCheckLnAddressAvailability({
    required Multimint that,
    required String username,
    required String domain,
    required String lnAddressApi,
    required String recurringdApi,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(domain, serializer);
          sse_encode_String(lnAddressApi, serializer);
          sse_encode_String(recurringdApi, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 53,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ln_address_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintCheckLnAddressAvailabilityConstMeta,
        argValues: [
          that,
          username,
          domain,
          lnAddressApi,
          recurringdApi,
          federationId,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintMultimintCheckLnAddressAvailabilityConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_check_ln_address_availability",
        argNames: [
          "that",
          "username",
          "domain",
          "lnAddressApi",
          "recurringdApi",
          "federationId",
        ],
      );

  @override
  Future<bool> crateMultimintMultimintContainsClient({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 54,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintContainsClientConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintContainsClientConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_contains_client",
        argNames: ["that", "federationId"],
      );

  @override
  Future<List<(FederationSelector, bool)>> crateMultimintMultimintFederations({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 55,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintFederationsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintFederationsConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_federations",
        argNames: ["that"],
      );

  @override
  Future<List<(String, BigInt, BigInt?)>> crateMultimintMultimintGetAddresses({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 56,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_string_u_64_opt_box_autoadd_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetAddressesConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetAddressesConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_addresses",
        argNames: ["that", "federationId"],
      );

  @override
  Future<List<String>> crateMultimintMultimintGetAllInviteCodes({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 57,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetAllInviteCodesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetAllInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_all_invite_codes",
        argNames: ["that"],
      );

  @override
  Future<BigInt?> crateMultimintMultimintGetBtcPrice({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 58,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetBtcPriceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetBtcPriceConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_btc_price",
        argNames: ["that"],
      );

  @override
  Future<FederationMeta> crateMultimintMultimintGetCachedFederationMeta({
    required Multimint that,
    String? invite,
    FederationId? federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_opt_String(invite, serializer);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 59,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintGetCachedFederationMetaConstMeta,
        argValues: [that, invite, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetCachedFederationMetaConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_cached_federation_meta",
        argNames: ["that", "invite", "federationId"],
      );

  @override
  Future<DisplaySetting> crateMultimintMultimintGetDisplaySetting({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 60,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_display_setting,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetDisplaySettingConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetDisplaySettingConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_display_setting",
        argNames: ["that"],
      );

  @override
  Future<String> crateMultimintMultimintGetInviteCode({
    required Multimint that,
    required FederationId federationId,
    required int peer,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_16(peer, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 61,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintGetInviteCodeConstMeta,
        argValues: [that, federationId, peer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_invite_code",
        argNames: ["that", "federationId", "peer"],
      );

  @override
  Future<LightningAddressConfig?> crateMultimintMultimintGetLnAddressConfig({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 62,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetLnAddressConfigConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetLnAddressConfigConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_ln_address_config",
        argNames: ["that", "federationId"],
      );

  @override
  Future<BigInt> crateMultimintMultimintGetMaxWithdrawableAmount({
    required Multimint that,
    required FederationId federationId,
    required String address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 63,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintGetMaxWithdrawableAmountConstMeta,
        argValues: [that, federationId, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetMaxWithdrawableAmountConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_max_withdrawable_amount",
        argNames: ["that", "federationId", "address"],
      );

  @override
  Future<List<String>> crateMultimintMultimintGetMnemonic({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 64,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetMnemonicConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetMnemonicConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_mnemonic",
        argNames: ["that"],
      );

  @override
  Future<List<(BigInt, BigInt)>> crateMultimintMultimintGetNoteSummary({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 65,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_record_u_64_usize,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintGetNoteSummaryConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetNoteSummaryConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_note_summary",
        argNames: ["that", "federationId"],
      );

  @override
  Future<RecoveryProgress> crateMultimintMultimintGetRecoveryProgress({
    required Multimint that,
    required FederationId federationId,
    required int moduleId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_16(moduleId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 66,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetRecoveryProgressConstMeta,
        argValues: [that, federationId, moduleId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetRecoveryProgressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_recovery_progress",
        argNames: ["that", "federationId", "moduleId"],
      );

  @override
  Future<bool> crateMultimintMultimintHasSeedPhraseAck({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 67,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintHasSeedPhraseAckConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintHasSeedPhraseAckConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_has_seed_phrase_ack",
        argNames: ["that"],
      );

  @override
  Future<FederationSelector> crateMultimintMultimintJoinFederation({
    required Multimint that,
    required String invite,
    required bool recover,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(invite, serializer);
          sse_encode_bool(recover, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 68,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintJoinFederationConstMeta,
        argValues: [that, invite, recover],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintJoinFederationConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_join_federation",
        argNames: ["that", "invite", "recover"],
      );

  @override
  Future<void> crateMultimintMultimintLeaveFederation({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 69,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintLeaveFederationConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintLeaveFederationConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_leave_federation",
        argNames: ["that", "federationId"],
      );

  @override
  Future<List<FedimintGateway>> crateMultimintMultimintListGateways({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 70,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_fedimint_gateway,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintListGatewaysConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintListGatewaysConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_list_gateways",
        argNames: ["that", "federationId"],
      );

  @override
  Future<void> crateMultimintMultimintMonitorDepositAddress({
    required Multimint that,
    required FederationId federationId,
    required String address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 71,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintMonitorDepositAddressConstMeta,
        argValues: [that, federationId, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintMonitorDepositAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_monitor_deposit_address",
        argNames: ["that", "federationId", "address"],
      );

  @override
  Future<Multimint> crateMultimintMultimintNew({
    required Database db,
    required MultimintCreation creationType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            db,
            serializer,
          );
          sse_encode_box_autoadd_multimint_creation(creationType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 72,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintNewConstMeta,
        argValues: [db, creationType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintNewConstMeta => const TaskConstMeta(
    debugName: "Multimint_new",
    argNames: ["db", "creationType"],
  );

  @override
  Future<BigInt> crateMultimintMultimintParseEcash({
    required Multimint that,
    required FederationId federationId,
    required OobNotes notes,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
            notes,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 73,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintParseEcashConstMeta,
        argValues: [that, federationId, notes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintParseEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_parse_ecash",
        argNames: ["that", "federationId", "notes"],
      );

  @override
  Future<(Bolt11Invoice, OperationId)> crateMultimintMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsatsWithFees, serializer);
          sse_encode_u_64(amountMsatsWithoutFees, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            gateway,
            serializer,
          );
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 74,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintReceiveConstMeta,
        argValues: [
          that,
          federationId,
          amountMsatsWithFees,
          amountMsatsWithoutFees,
          gateway,
          isLnv2,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_receive",
        argNames: [
          "that",
          "federationId",
          "amountMsatsWithFees",
          "amountMsatsWithoutFees",
          "gateway",
          "isLnv2",
        ],
      );

  @override
  Future<void> crateMultimintMultimintRecheckAddress({
    required Multimint that,
    required FederationId federationId,
    required BigInt tweakIdx,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(tweakIdx, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 75,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintRecheckAddressConstMeta,
        argValues: [that, federationId, tweakIdx],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintRecheckAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_recheck_address",
        argNames: ["that", "federationId", "tweakIdx"],
      );

  @override
  Future<void> crateMultimintMultimintRegisterLnAddress({
    required Multimint that,
    required FederationId federationId,
    required String recurringdApi,
    required String lnAddressApi,
    required String username,
    required String domain,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(recurringdApi, serializer);
          sse_encode_String(lnAddressApi, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(domain, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 76,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintRegisterLnAddressConstMeta,
        argValues: [
          that,
          federationId,
          recurringdApi,
          lnAddressApi,
          username,
          domain,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintRegisterLnAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_register_ln_address",
        argNames: [
          "that",
          "federationId",
          "recurringdApi",
          "lnAddressApi",
          "username",
          "domain",
        ],
      );

  @override
  Future<OperationId> crateMultimintMultimintReissueEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 77,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintReissueEcashConstMeta,
        argValues: [that, federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintReissueEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_reissue_ecash",
        argNames: ["that", "federationId", "ecash"],
      );

  @override
  Future<void> crateMultimintMultimintRejoinFromBackupInvites({
    required Multimint that,
    required List<String> backupInviteCodes,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_list_String(backupInviteCodes, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 78,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintRejoinFromBackupInvitesConstMeta,
        argValues: [that, backupInviteCodes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintRejoinFromBackupInvitesConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_rejoin_from_backup_invites",
        argNames: ["that", "backupInviteCodes"],
      );

  @override
  Future<(String, BigInt, bool)> crateMultimintMultimintSelectReceiveGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 79,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSelectReceiveGatewayConstMeta,
        argValues: [that, federationId, amount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSelectReceiveGatewayConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_select_receive_gateway",
        argNames: ["that", "federationId", "amount"],
      );

  @override
  Future<(String, BigInt, bool)> crateMultimintMultimintSelectSendGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
            bolt11,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 80,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSelectSendGatewayConstMeta,
        argValues: [that, federationId, amount, bolt11],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSelectSendGatewayConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_select_send_gateway",
        argNames: ["that", "federationId", "amount", "bolt11"],
      );

  @override
  Future<OperationId> crateMultimintMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
    required BigInt amountWithFees,
    String? lnAddress,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            gateway,
            serializer,
          );
          sse_encode_bool(isLnv2, serializer);
          sse_encode_u_64(amountWithFees, serializer);
          sse_encode_opt_String(lnAddress, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 81,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSendConstMeta,
        argValues: [
          that,
          federationId,
          invoice,
          gateway,
          isLnv2,
          amountWithFees,
          lnAddress,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_send",
        argNames: [
          "that",
          "federationId",
          "invoice",
          "gateway",
          "isLnv2",
          "amountWithFees",
          "lnAddress",
        ],
      );

  @override
  Future<(OperationId, String, BigInt)> crateMultimintMultimintSendEcash({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 82,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSendEcashConstMeta,
        argValues: [that, federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSendEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_send_ecash",
        argNames: ["that", "federationId", "amountMsats"],
      );

  @override
  Future<void> crateMultimintMultimintSetDisplaySetting({
    required Multimint that,
    required DisplaySetting displaySetting,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_display_setting(displaySetting, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 83,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintSetDisplaySettingConstMeta,
        argValues: [that, displaySetting],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSetDisplaySettingConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_set_display_setting",
        argNames: ["that", "displaySetting"],
      );

  @override
  Future<List<Transaction>> crateMultimintMultimintTransactions({
    required Multimint that,
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_opt_box_autoadd_u_64(timestamp, serializer);
          sse_encode_opt_list_prim_u_8_strict(operationId, serializer);
          sse_encode_list_String(modules, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 84,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintTransactionsConstMeta,
        argValues: [that, federationId, timestamp, operationId, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_transactions",
        argNames: [
          "that",
          "federationId",
          "timestamp",
          "operationId",
          "modules",
        ],
      );

  @override
  Future<List<Utxo>> crateMultimintMultimintWalletSummary({
    required Multimint that,
    String? invite,
    FederationId? federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_opt_String(invite, serializer);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 85,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_utxo,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintWalletSummaryConstMeta,
        argValues: [that, invite, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintWalletSummaryConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_wallet_summary",
        argNames: ["that", "invite", "federationId"],
      );

  @override
  Future<OperationId> crateMultimintMultimintWithdrawToAddress({
    required Multimint that,
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
    required PegOutFees pegOutFees,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(amountSats, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
            pegOutFees,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 86,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintWithdrawToAddressConstMeta,
        argValues: [that, federationId, address, amountSats, pegOutFees],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintWithdrawToAddressConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_withdraw_to_address",
        argNames: [
          "that",
          "federationId",
          "address",
          "amountSats",
          "pegOutFees",
        ],
      );

  @override
  Future<void> crateNostrNostrClientBackupInviteCodes({
    required NostrClient that,
    required List<String> inviteCodes,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          sse_encode_list_String(inviteCodes, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 87,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateNostrNostrClientBackupInviteCodesConstMeta,
        argValues: [that, inviteCodes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientBackupInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_backup_invite_codes",
        argNames: ["that", "inviteCodes"],
      );

  @override
  Future<List<String>> crateNostrNostrClientGetBackupInviteCodes({
    required NostrClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 88,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientGetBackupInviteCodesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientGetBackupInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_get_backup_invite_codes",
        argNames: ["that"],
      );

  @override
  Future<List<(FederationSelector, NWCConnectionInfo)>>
  crateNostrNostrClientGetNwcConnectionInfo({required NostrClient that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 89,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientGetNwcConnectionInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientGetNwcConnectionInfoConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_get_nwc_connection_info",
        argNames: ["that"],
      );

  @override
  Future<List<PublicFederation>> crateNostrNostrClientGetPublicFederations({
    required NostrClient that,
    required bool forceUpdate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          sse_encode_bool(forceUpdate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 90,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientGetPublicFederationsConstMeta,
        argValues: [that, forceUpdate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientGetPublicFederationsConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_get_public_federations",
        argNames: ["that", "forceUpdate"],
      );

  @override
  Future<List<(String, bool)>> crateNostrNostrClientGetRelays({
    required NostrClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 91,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_record_string_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientGetRelaysConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientGetRelaysConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_get_relays",
        argNames: ["that"],
      );

  @override
  Future<void> crateNostrNostrClientInsertRelay({
    required NostrClient that,
    required String relayUri,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          sse_encode_String(relayUri, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 92,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateNostrNostrClientInsertRelayConstMeta,
        argValues: [that, relayUri],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientInsertRelayConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_insert_relay",
        argNames: ["that", "relayUri"],
      );

  @override
  Future<NostrClient> crateNostrNostrClientNew({
    required Database db,
    required List<String> recoverRelays,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            db,
            serializer,
          );
          sse_encode_list_String(recoverRelays, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 93,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateNostrNostrClientNewConstMeta,
        argValues: [db, recoverRelays],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientNewConstMeta => const TaskConstMeta(
    debugName: "NostrClient_new",
    argNames: ["db", "recoverRelays"],
  );

  @override
  Future<void> crateNostrNostrClientRemoveRelay({
    required NostrClient that,
    required String relayUri,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          sse_encode_String(relayUri, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 94,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateNostrNostrClientRemoveRelayConstMeta,
        argValues: [that, relayUri],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientRemoveRelayConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_remove_relay",
        argNames: ["that", "relayUri"],
      );

  @override
  Future<NWCConnectionInfo> crateNostrNostrClientSetNwcConnectionInfo({
    required NostrClient that,
    required FederationId federationId,
    required String relay,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(relay, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 95,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_nwc_connection_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientSetNwcConnectionInfoConstMeta,
        argValues: [that, federationId, relay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientSetNwcConnectionInfoConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_set_nwc_connection_info",
        argNames: ["that", "federationId", "relay"],
      );

  @override
  String? crateNostrPublicFederationAutoAccessorGetAbout({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetAboutConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrPublicFederationAutoAccessorGetAboutConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_about",
        argNames: ["that"],
      );

  @override
  FederationId crateNostrPublicFederationAutoAccessorGetFederationId({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  String crateNostrPublicFederationAutoAccessorGetFederationName({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  List<String> crateNostrPublicFederationAutoAccessorGetInviteCodes({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 99)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetInviteCodesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_invite_codes",
        argNames: ["that"],
      );

  @override
  List<String> crateNostrPublicFederationAutoAccessorGetModules({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 100,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetModulesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_modules",
        argNames: ["that"],
      );

  @override
  String crateNostrPublicFederationAutoAccessorGetNetwork({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 101,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  String? crateNostrPublicFederationAutoAccessorGetPicture({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 102,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetPictureConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_picture",
        argNames: ["that"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetAbout({
    required PublicFederation that,
    String? about,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_opt_String(about, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 103,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetAboutConstMeta,
        argValues: [that, about],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrPublicFederationAutoAccessorSetAboutConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_about",
        argNames: ["that", "about"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetFederationId({
    required PublicFederation that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 104,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetFederationName({
    required PublicFederation that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 105,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetInviteCodes({
    required PublicFederation that,
    required List<String> inviteCodes,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_list_String(inviteCodes, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 106,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetInviteCodesConstMeta,
        argValues: [that, inviteCodes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_invite_codes",
        argNames: ["that", "inviteCodes"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetModules({
    required PublicFederation that,
    required List<String> modules,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_list_String(modules, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 107,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetModulesConstMeta,
        argValues: [that, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_modules",
        argNames: ["that", "modules"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetNetwork({
    required PublicFederation that,
    required String network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_String(network, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 108,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetPicture({
    required PublicFederation that,
    String? picture,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_opt_String(picture, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 109,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetPictureConstMeta,
        argValues: [that, picture],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_picture",
        argNames: ["that", "picture"],
      );

  @override
  BigInt crateMultimintWithdrawFeesResponseAutoAccessorGetFeeAmount({
    required WithdrawFeesResponse that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 110,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorGetFeeAmountConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorGetFeeAmountConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_get_fee_amount",
        argNames: ["that"],
      );

  @override
  double crateMultimintWithdrawFeesResponseAutoAccessorGetFeeRateSatsPerVb({
    required WithdrawFeesResponse that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 111,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorGetFeeRateSatsPerVbConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorGetFeeRateSatsPerVbConstMeta =>
      const TaskConstMeta(
        debugName:
            "WithdrawFeesResponse_auto_accessor_get_fee_rate_sats_per_vb",
        argNames: ["that"],
      );

  @override
  PegOutFees crateMultimintWithdrawFeesResponseAutoAccessorGetPegOutFees({
    required WithdrawFeesResponse that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 112,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorGetPegOutFeesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorGetPegOutFeesConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_get_peg_out_fees",
        argNames: ["that"],
      );

  @override
  int crateMultimintWithdrawFeesResponseAutoAccessorGetTxSizeVbytes({
    required WithdrawFeesResponse that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 113,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorGetTxSizeVbytesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorGetTxSizeVbytesConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_get_tx_size_vbytes",
        argNames: ["that"],
      );

  @override
  void crateMultimintWithdrawFeesResponseAutoAccessorSetFeeAmount({
    required WithdrawFeesResponse that,
    required BigInt feeAmount,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          sse_encode_u_64(feeAmount, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 114,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorSetFeeAmountConstMeta,
        argValues: [that, feeAmount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorSetFeeAmountConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_set_fee_amount",
        argNames: ["that", "feeAmount"],
      );

  @override
  void crateMultimintWithdrawFeesResponseAutoAccessorSetFeeRateSatsPerVb({
    required WithdrawFeesResponse that,
    required double feeRateSatsPerVb,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          sse_encode_f_64(feeRateSatsPerVb, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 115,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorSetFeeRateSatsPerVbConstMeta,
        argValues: [that, feeRateSatsPerVb],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorSetFeeRateSatsPerVbConstMeta =>
      const TaskConstMeta(
        debugName:
            "WithdrawFeesResponse_auto_accessor_set_fee_rate_sats_per_vb",
        argNames: ["that", "feeRateSatsPerVb"],
      );

  @override
  void crateMultimintWithdrawFeesResponseAutoAccessorSetPegOutFees({
    required WithdrawFeesResponse that,
    required PegOutFees pegOutFees,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
            pegOutFees,
            serializer,
          );
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 116,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorSetPegOutFeesConstMeta,
        argValues: [that, pegOutFees],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorSetPegOutFeesConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_set_peg_out_fees",
        argNames: ["that", "pegOutFees"],
      );

  @override
  void crateMultimintWithdrawFeesResponseAutoAccessorSetTxSizeVbytes({
    required WithdrawFeesResponse that,
    required int txSizeVbytes,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
            that,
            serializer,
          );
          sse_encode_u_32(txSizeVbytes, serializer);
          return pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 117,
          )!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintWithdrawFeesResponseAutoAccessorSetTxSizeVbytesConstMeta,
        argValues: [that, txSizeVbytes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintWithdrawFeesResponseAutoAccessorSetTxSizeVbytesConstMeta =>
      const TaskConstMeta(
        debugName: "WithdrawFeesResponse_auto_accessor_set_tx_size_vbytes",
        argNames: ["that", "txSizeVbytes"],
      );

  @override
  Future<void> crateAckSeedPhrase() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 118,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAckSeedPhraseConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAckSeedPhraseConstMeta =>
      const TaskConstMeta(debugName: "ack_seed_phrase", argNames: []);

  @override
  Future<void> crateAddRecoveryRelay({required String relay}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(relay, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 119,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAddRecoveryRelayConstMeta,
        argValues: [relay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAddRecoveryRelayConstMeta =>
      const TaskConstMeta(debugName: "add_recovery_relay", argNames: ["relay"]);

  @override
  Future<String> crateAllocateDepositAddress({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 120,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAllocateDepositAddressConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAllocateDepositAddressConstMeta =>
      const TaskConstMeta(
        debugName: "allocate_deposit_address",
        argNames: ["federationId"],
      );

  @override
  Future<(ReissueExternalNotesState, BigInt?)> crateAwaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 121,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_reissue_external_notes_state_opt_box_autoadd_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitEcashReissueConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitEcashReissueConstMeta => const TaskConstMeta(
    debugName: "await_ecash_reissue",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<(FinalReceiveOperationState, BigInt)> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 122,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_final_receive_operation_state_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitReceiveConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitReceiveConstMeta => const TaskConstMeta(
    debugName: "await_receive",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<LightningSendOutcome> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 123,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_lightning_send_outcome,
          decodeErrorData: null,
        ),
        constMeta: kCrateAwaitSendConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitSendConstMeta => const TaskConstMeta(
    debugName: "await_send",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<String> crateAwaitWithdraw({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 124,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitWithdrawConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitWithdrawConstMeta => const TaskConstMeta(
    debugName: "await_withdraw",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<void> crateBackupInviteCodes() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 125,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateBackupInviteCodesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBackupInviteCodesConstMeta =>
      const TaskConstMeta(debugName: "backup_invite_codes", argNames: []);

  @override
  Future<BigInt> crateBalance({required FederationId federationId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 126,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateBalanceConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBalanceConstMeta =>
      const TaskConstMeta(debugName: "balance", argNames: ["federationId"]);

  @override
  Future<WithdrawFeesResponse> crateCalculateWithdrawFees({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(amountSats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 127,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCalculateWithdrawFeesConstMeta,
        argValues: [federationId, address, amountSats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCalculateWithdrawFeesConstMeta => const TaskConstMeta(
    debugName: "calculate_withdraw_fees",
    argNames: ["federationId", "address", "amountSats"],
  );

  @override
  Future<bool> crateCheckEcashSpent({
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 128,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCheckEcashSpentConstMeta,
        argValues: [federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCheckEcashSpentConstMeta => const TaskConstMeta(
    debugName: "check_ecash_spent",
    argNames: ["federationId", "ecash"],
  );

  @override
  Future<LNAddressStatus> crateCheckLnAddressAvailability({
    required String username,
    required String domain,
    required String lnAddressApi,
    required String recurringdApi,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(domain, serializer);
          sse_encode_String(lnAddressApi, serializer);
          sse_encode_String(recurringdApi, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 129,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ln_address_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCheckLnAddressAvailabilityConstMeta,
        argValues: [
          username,
          domain,
          lnAddressApi,
          recurringdApi,
          federationId,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCheckLnAddressAvailabilityConstMeta =>
      const TaskConstMeta(
        debugName: "check_ln_address_availability",
        argNames: [
          "username",
          "domain",
          "lnAddressApi",
          "recurringdApi",
          "federationId",
        ],
      );

  @override
  Future<(String, String)> crateClaimRandomLnAddress({
    required FederationId federationId,
    required String lnAddressApi,
    required String recurringdApi,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(lnAddressApi, serializer);
          sse_encode_String(recurringdApi, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 130,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_string,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateClaimRandomLnAddressConstMeta,
        argValues: [federationId, lnAddressApi, recurringdApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateClaimRandomLnAddressConstMeta => const TaskConstMeta(
    debugName: "claim_random_ln_address",
    argNames: ["federationId", "lnAddressApi", "recurringdApi"],
  );

  @override
  Future<void> crateCreateMultimintFromWords({
    required String path,
    required List<String> words,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          sse_encode_list_String(words, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 131,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateCreateMultimintFromWordsConstMeta,
        argValues: [path, words],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCreateMultimintFromWordsConstMeta =>
      const TaskConstMeta(
        debugName: "create_multimint_from_words",
        argNames: ["path", "words"],
      );

  @override
  Future<void> crateCreateNewMultimint({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 132,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateCreateNewMultimintConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCreateNewMultimintConstMeta => const TaskConstMeta(
    debugName: "create_new_multimint",
    argNames: ["path"],
  );

  @override
  Future<String> crateFederationIdToString({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 133,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationIdToStringConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateFederationIdToStringConstMeta => const TaskConstMeta(
    debugName: "federation_id_to_string",
    argNames: ["federationId"],
  );

  @override
  Future<List<(FederationSelector, bool)>> crateFederations() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 134,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateFederationsConstMeta =>
      const TaskConstMeta(debugName: "federations", argNames: []);

  @override
  Future<List<(String, BigInt, BigInt?)>> crateGetAddresses({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 135,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_string_u_64_opt_box_autoadd_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetAddressesConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetAddressesConstMeta => const TaskConstMeta(
    debugName: "get_addresses",
    argNames: ["federationId"],
  );

  @override
  Future<BigInt?> crateGetBtcPrice() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 136,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetBtcPriceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetBtcPriceConstMeta =>
      const TaskConstMeta(debugName: "get_btc_price", argNames: []);

  @override
  Future<DisplaySetting> crateGetDisplaySetting() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 137,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_display_setting,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetDisplaySettingConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetDisplaySettingConstMeta =>
      const TaskConstMeta(debugName: "get_display_setting", argNames: []);

  @override
  Future<EventBusMultimintEvent> crateGetEventBus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 138,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetEventBusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetEventBusConstMeta =>
      const TaskConstMeta(debugName: "get_event_bus", argNames: []);

  @override
  Future<FederationMeta> crateGetFederationMeta({
    String? inviteCode,
    FederationId? federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(inviteCode, serializer);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 139,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetFederationMetaConstMeta,
        argValues: [inviteCode, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetFederationMetaConstMeta => const TaskConstMeta(
    debugName: "get_federation_meta",
    argNames: ["inviteCode", "federationId"],
  );

  @override
  Future<String> crateGetInviteCode({
    required FederationId federationId,
    required int peer,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_16(peer, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 140,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetInviteCodeConstMeta,
        argValues: [federationId, peer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetInviteCodeConstMeta => const TaskConstMeta(
    debugName: "get_invite_code",
    argNames: ["federationId", "peer"],
  );

  @override
  Future<String> crateGetInvoiceFromLnaddressOrLnurl({
    required BigInt amountMsats,
    required String lnaddressOrLnurl,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_64(amountMsats, serializer);
          sse_encode_String(lnaddressOrLnurl, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 141,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetInvoiceFromLnaddressOrLnurlConstMeta,
        argValues: [amountMsats, lnaddressOrLnurl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetInvoiceFromLnaddressOrLnurlConstMeta =>
      const TaskConstMeta(
        debugName: "get_invoice_from_lnaddress_or_lnurl",
        argNames: ["amountMsats", "lnaddressOrLnurl"],
      );

  @override
  Future<LightningAddressConfig?> crateGetLnAddressConfig({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 142,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetLnAddressConfigConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetLnAddressConfigConstMeta => const TaskConstMeta(
    debugName: "get_ln_address_config",
    argNames: ["federationId"],
  );

  @override
  Future<BigInt> crateGetMaxWithdrawableAmount({
    required FederationId federationId,
    required String address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 143,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetMaxWithdrawableAmountConstMeta,
        argValues: [federationId, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetMaxWithdrawableAmountConstMeta =>
      const TaskConstMeta(
        debugName: "get_max_withdrawable_amount",
        argNames: ["federationId", "address"],
      );

  @override
  Future<List<String>> crateGetMnemonic() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 144,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetMnemonicConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetMnemonicConstMeta =>
      const TaskConstMeta(debugName: "get_mnemonic", argNames: []);

  @override
  Future<(int, int)> crateGetModuleRecoveryProgress({
    required FederationId federationId,
    required int moduleId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_16(moduleId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 145,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_u_32_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetModuleRecoveryProgressConstMeta,
        argValues: [federationId, moduleId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetModuleRecoveryProgressConstMeta =>
      const TaskConstMeta(
        debugName: "get_module_recovery_progress",
        argNames: ["federationId", "moduleId"],
      );

  @override
  Future<List<(BigInt, BigInt)>> crateGetNoteSummary({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 146,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_record_u_64_usize,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetNoteSummaryConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetNoteSummaryConstMeta => const TaskConstMeta(
    debugName: "get_note_summary",
    argNames: ["federationId"],
  );

  @override
  Future<List<(FederationSelector, NWCConnectionInfo)>>
  crateGetNwcConnectionInfo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 147,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetNwcConnectionInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetNwcConnectionInfoConstMeta =>
      const TaskConstMeta(debugName: "get_nwc_connection_info", argNames: []);

  @override
  Future<List<(String, bool)>> crateGetRelays() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 148,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_record_string_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetRelaysConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetRelaysConstMeta =>
      const TaskConstMeta(debugName: "get_relays", argNames: []);

  @override
  Future<bool> crateHasSeedPhraseAck() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 149,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateHasSeedPhraseAckConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateHasSeedPhraseAckConstMeta =>
      const TaskConstMeta(debugName: "has_seed_phrase_ack", argNames: []);

  @override
  Future<void> crateInsertRelay({required String relayUri}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(relayUri, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 150,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateInsertRelayConstMeta,
        argValues: [relayUri],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateInsertRelayConstMeta =>
      const TaskConstMeta(debugName: "insert_relay", argNames: ["relayUri"]);

  @override
  Future<FederationSelector> crateJoinFederation({
    required String inviteCode,
    required bool recover,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(inviteCode, serializer);
          sse_encode_bool(recover, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 151,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateJoinFederationConstMeta,
        argValues: [inviteCode, recover],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateJoinFederationConstMeta => const TaskConstMeta(
    debugName: "join_federation",
    argNames: ["inviteCode", "recover"],
  );

  @override
  Future<void> crateLeaveFederation({required FederationId federationId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 152,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateLeaveFederationConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateLeaveFederationConstMeta => const TaskConstMeta(
    debugName: "leave_federation",
    argNames: ["federationId"],
  );

  @override
  Future<List<PublicFederation>> crateListFederationsFromNostr({
    required bool forceUpdate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(forceUpdate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 153,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation,
          decodeErrorData: null,
        ),
        constMeta: kCrateListFederationsFromNostrConstMeta,
        argValues: [forceUpdate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateListFederationsFromNostrConstMeta =>
      const TaskConstMeta(
        debugName: "list_federations_from_nostr",
        argNames: ["forceUpdate"],
      );

  @override
  Future<List<FedimintGateway>> crateListGateways({
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 154,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_fedimint_gateway,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateListGatewaysConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateListGatewaysConstMeta => const TaskConstMeta(
    debugName: "list_gateways",
    argNames: ["federationId"],
  );

  @override
  Future<List<String>> crateListLnAddressDomains({
    required String lnAddressApi,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(lnAddressApi, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 155,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateListLnAddressDomainsConstMeta,
        argValues: [lnAddressApi],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateListLnAddressDomainsConstMeta => const TaskConstMeta(
    debugName: "list_ln_address_domains",
    argNames: ["lnAddressApi"],
  );

  @override
  Future<void> crateLoadMultimint({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 156,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateLoadMultimintConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateLoadMultimintConstMeta =>
      const TaskConstMeta(debugName: "load_multimint", argNames: ["path"]);

  @override
  Future<(ParsedText, FederationSelector)> crateParseScannedTextForFederation({
    required String text,
    required FederationSelector federation,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            federation,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 157,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_parsed_text_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateParseScannedTextForFederationConstMeta,
        argValues: [text, federation],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateParseScannedTextForFederationConstMeta =>
      const TaskConstMeta(
        debugName: "parse_scanned_text_for_federation",
        argNames: ["text", "federation"],
      );

  @override
  Future<(ParsedText, FederationSelector?)> crateParsedScannedText({
    required String text,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(text, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 158,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_parsed_text_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateParsedScannedTextConstMeta,
        argValues: [text],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateParsedScannedTextConstMeta =>
      const TaskConstMeta(debugName: "parsed_scanned_text", argNames: ["text"]);

  @override
  Future<PaymentPreview> cratePaymentPreview({
    required FederationId federationId,
    required String bolt11,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(bolt11, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 159,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_payment_preview,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCratePaymentPreviewConstMeta,
        argValues: [federationId, bolt11],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCratePaymentPreviewConstMeta => const TaskConstMeta(
    debugName: "payment_preview",
    argNames: ["federationId", "bolt11"],
  );

  @override
  Future<(String, OperationId, String, String, BigInt)> crateReceive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required String gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsatsWithFees, serializer);
          sse_encode_u_64(amountMsatsWithoutFees, serializer);
          sse_encode_String(gateway, serializer);
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 160,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateReceiveConstMeta,
        argValues: [
          federationId,
          amountMsatsWithFees,
          amountMsatsWithoutFees,
          gateway,
          isLnv2,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateReceiveConstMeta => const TaskConstMeta(
    debugName: "receive",
    argNames: [
      "federationId",
      "amountMsatsWithFees",
      "amountMsatsWithoutFees",
      "gateway",
      "isLnv2",
    ],
  );

  @override
  Future<void> crateRecheckAddress({
    required FederationId federationId,
    required BigInt tweakIdx,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(tweakIdx, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 161,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateRecheckAddressConstMeta,
        argValues: [federationId, tweakIdx],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateRecheckAddressConstMeta => const TaskConstMeta(
    debugName: "recheck_address",
    argNames: ["federationId", "tweakIdx"],
  );

  @override
  Future<void> crateRegisterLnAddress({
    required FederationId federationId,
    required String recurringdApi,
    required String lnAddressApi,
    required String username,
    required String domain,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(recurringdApi, serializer);
          sse_encode_String(lnAddressApi, serializer);
          sse_encode_String(username, serializer);
          sse_encode_String(domain, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 162,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateRegisterLnAddressConstMeta,
        argValues: [
          federationId,
          recurringdApi,
          lnAddressApi,
          username,
          domain,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateRegisterLnAddressConstMeta => const TaskConstMeta(
    debugName: "register_ln_address",
    argNames: [
      "federationId",
      "recurringdApi",
      "lnAddressApi",
      "username",
      "domain",
    ],
  );

  @override
  Future<OperationId> crateReissueEcash({
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 163,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateReissueEcashConstMeta,
        argValues: [federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateReissueEcashConstMeta => const TaskConstMeta(
    debugName: "reissue_ecash",
    argNames: ["federationId", "ecash"],
  );

  @override
  Future<void> crateRejoinFromBackupInvites() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 164,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateRejoinFromBackupInvitesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateRejoinFromBackupInvitesConstMeta =>
      const TaskConstMeta(
        debugName: "rejoin_from_backup_invites",
        argNames: [],
      );

  @override
  Future<void> crateRemoveRelay({required String relayUri}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(relayUri, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 165,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateRemoveRelayConstMeta,
        argValues: [relayUri],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateRemoveRelayConstMeta =>
      const TaskConstMeta(debugName: "remove_relay", argNames: ["relayUri"]);

  @override
  Future<(String, BigInt, bool)> crateSelectReceiveGateway({
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 166,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSelectReceiveGatewayConstMeta,
        argValues: [federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSelectReceiveGatewayConstMeta => const TaskConstMeta(
    debugName: "select_receive_gateway",
    argNames: ["federationId", "amountMsats"],
  );

  @override
  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
    required String gateway,
    required bool isLnv2,
    required BigInt amountWithFees,
    String? lnAddress,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          sse_encode_String(gateway, serializer);
          sse_encode_bool(isLnv2, serializer);
          sse_encode_u_64(amountWithFees, serializer);
          sse_encode_opt_String(lnAddress, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 167,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendConstMeta,
        argValues: [
          federationId,
          invoice,
          gateway,
          isLnv2,
          amountWithFees,
          lnAddress,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendConstMeta => const TaskConstMeta(
    debugName: "send",
    argNames: [
      "federationId",
      "invoice",
      "gateway",
      "isLnv2",
      "amountWithFees",
      "lnAddress",
    ],
  );

  @override
  Future<(OperationId, String, BigInt)> crateSendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 168,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendEcashConstMeta,
        argValues: [federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendEcashConstMeta => const TaskConstMeta(
    debugName: "send_ecash",
    argNames: ["federationId", "amountMsats"],
  );

  @override
  Future<OperationId> crateSendLnaddress({
    required FederationId federationId,
    required BigInt amountMsats,
    required String address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          sse_encode_String(address, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 169,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendLnaddressConstMeta,
        argValues: [federationId, amountMsats, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendLnaddressConstMeta => const TaskConstMeta(
    debugName: "send_lnaddress",
    argNames: ["federationId", "amountMsats", "address"],
  );

  @override
  Future<void> crateSetDisplaySetting({
    required DisplaySetting displaySetting,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_display_setting(displaySetting, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 170,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateSetDisplaySettingConstMeta,
        argValues: [displaySetting],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSetDisplaySettingConstMeta => const TaskConstMeta(
    debugName: "set_display_setting",
    argNames: ["displaySetting"],
  );

  @override
  Future<NWCConnectionInfo> crateSetNwcConnectionInfo({
    required FederationId federationId,
    required String relay,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(relay, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 171,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_nwc_connection_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateSetNwcConnectionInfoConstMeta,
        argValues: [federationId, relay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSetNwcConnectionInfoConstMeta => const TaskConstMeta(
    debugName: "set_nwc_connection_info",
    argNames: ["federationId", "relay"],
  );

  @override
  Stream<DepositEventKind> crateSubscribeDeposits({
    required FederationId federationId,
  }) {
    final sink = RustStreamSink<DepositEventKind>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_deposit_event_kind_Sse(sink, serializer);
            sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
              federationId,
              serializer,
            );
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 172,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateSubscribeDepositsConstMeta,
          argValues: [sink, federationId],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateSubscribeDepositsConstMeta => const TaskConstMeta(
    debugName: "subscribe_deposits",
    argNames: ["sink", "federationId"],
  );

  @override
  Stream<MultimintEvent> crateSubscribeMultimintEvents() {
    final sink = RustStreamSink<MultimintEvent>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_multimint_event_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 173,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateSubscribeMultimintEventsConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateSubscribeMultimintEventsConstMeta =>
      const TaskConstMeta(
        debugName: "subscribe_multimint_events",
        argNames: ["sink"],
      );

  @override
  Stream<(int, int)> crateSubscribeRecoveryProgress({
    required FederationId federationId,
    required int moduleId,
  }) {
    final sink = RustStreamSink<(int, int)>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_record_u_32_u_32_Sse(sink, serializer);
            sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
              federationId,
              serializer,
            );
            sse_encode_u_16(moduleId, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 174,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateSubscribeRecoveryProgressConstMeta,
          argValues: [sink, federationId, moduleId],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateSubscribeRecoveryProgressConstMeta =>
      const TaskConstMeta(
        debugName: "subscribe_recovery_progress",
        argNames: ["sink", "federationId", "moduleId"],
      );

  @override
  Future<List<Transaction>> crateTransactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_opt_box_autoadd_u_64(timestamp, serializer);
          sse_encode_opt_list_prim_u_8_strict(operationId, serializer);
          sse_encode_list_String(modules, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 175,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: null,
        ),
        constMeta: kCrateTransactionsConstMeta,
        argValues: [federationId, timestamp, operationId, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateTransactionsConstMeta => const TaskConstMeta(
    debugName: "transactions",
    argNames: ["federationId", "timestamp", "operationId", "modules"],
  );

  @override
  Future<List<Utxo>> crateWalletSummary({
    String? invite,
    FederationId? federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(invite, serializer);
          sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 176,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_utxo,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateWalletSummaryConstMeta,
        argValues: [invite, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWalletSummaryConstMeta => const TaskConstMeta(
    debugName: "wallet_summary",
    argNames: ["invite", "federationId"],
  );

  @override
  Future<OperationId> crateWithdrawToAddress({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
    required PegOutFees pegOutFees,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(address, serializer);
          sse_encode_u_64(amountSats, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
            pegOutFees,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 177,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateWithdrawToAddressConstMeta,
        argValues: [federationId, address, amountSats, pegOutFees],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWithdrawToAddressConstMeta => const TaskConstMeta(
    debugName: "withdraw_to_address",
    argNames: ["federationId", "address", "amountSats", "pegOutFees"],
  );

  @override
  Future<List<String>> crateWordList() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 178,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordListConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordListConstMeta =>
      const TaskConstMeta(debugName: "word_list", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Amount =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Amount =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Bolt11Invoice =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Bolt11Invoice =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Database =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Database =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EventBusMultimintEvent =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EventBusMultimintEvent =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationMeta =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationMeta =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LightningAddressConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LightningAddressConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_LightningAddressKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_LightningAddressKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NostrClient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NostrClient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OobNotes =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OobNotes =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PegOutFees =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PegOutFees =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicFederation =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicFederation =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RecoveryProgress =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RecoveryProgress =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReissueExternalNotesState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReissueExternalNotesState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SafeUrl =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SafeUrl =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SpendOobState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SpendOobState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_WithdrawFeesResponse =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_WithdrawFeesResponse =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Amount
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bolt11Invoice
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBusMultimintEvent
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBusMultimintEventImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FederationConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationMeta
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationMetaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PegOutFees
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PegOutFeesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecoveryProgress
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecoveryProgressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReissueExternalNotesState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  SafeUrl
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SafeUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpendOobState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WithdrawFeesResponse
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationMeta
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationMetaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LightningAddressConfig
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressKey
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WithdrawFeesResponse
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationMeta
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationMetaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LightningAddressConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OobNotes
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OobNotesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WithdrawFeesResponse
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Amount
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bolt11Invoice
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EventBusMultimintEvent
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EventBusMultimintEventImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FederationConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationMeta
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationMetaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  LightningAddressKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OobNotes
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OobNotesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PegOutFees
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PegOutFeesImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RecoveryProgress
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RecoveryProgressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReissueExternalNotesState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  SafeUrl
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SafeUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpendOobState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WithdrawFeesResponse
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<DepositEventKind> dco_decode_StreamSink_deposit_event_kind_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MultimintEvent> dco_decode_StreamSink_multimint_event_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<(int, int)> dco_decode_StreamSink_record_u_32_u_32_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AwaitingConfsEvent dco_decode_awaiting_confs_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AwaitingConfsEvent(
      amount: dco_decode_u_64(arr[0]),
      outpoint: dco_decode_String(arr[1]),
      blockHeight: dco_decode_u_64(arr[2]),
      needed: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FederationId
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      raw,
    );
  }

  @protected
  FederationSelector
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      raw,
    );
  }

  @protected
  LightningAddressConfig
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
      raw,
    );
  }

  @protected
  AwaitingConfsEvent dco_decode_box_autoadd_awaiting_confs_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_awaiting_confs_event(raw);
  }

  @protected
  ClaimedEvent dco_decode_box_autoadd_claimed_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_claimed_event(raw);
  }

  @protected
  ConfirmedEvent dco_decode_box_autoadd_confirmed_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_confirmed_event(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  InvoicePaidEvent dco_decode_box_autoadd_invoice_paid_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_invoice_paid_event(raw);
  }

  @protected
  MempoolEvent dco_decode_box_autoadd_mempool_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mempool_event(raw);
  }

  @protected
  MultimintCreation dco_decode_box_autoadd_multimint_creation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_multimint_creation(raw);
  }

  @protected
  (FederationId, DepositEventKind)
  dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (FederationId, DepositEventKind);
  }

  @protected
  (FederationId, LightningEventKind)
  dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (FederationId, LightningEventKind);
  }

  @protected
  (FederationId, BigInt)
  dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (FederationId, BigInt);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ClaimedEvent dco_decode_claimed_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ClaimedEvent(
      amount: dco_decode_u_64(arr[0]),
      outpoint: dco_decode_String(arr[1]),
    );
  }

  @protected
  ConfirmedEvent dco_decode_confirmed_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ConfirmedEvent(
      amount: dco_decode_u_64(arr[0]),
      outpoint: dco_decode_String(arr[1]),
    );
  }

  @protected
  DepositEventKind dco_decode_deposit_event_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DepositEventKind_Mempool(
          dco_decode_box_autoadd_mempool_event(raw[1]),
        );
      case 1:
        return DepositEventKind_AwaitingConfs(
          dco_decode_box_autoadd_awaiting_confs_event(raw[1]),
        );
      case 2:
        return DepositEventKind_Confirmed(
          dco_decode_box_autoadd_confirmed_event(raw[1]),
        );
      case 3:
        return DepositEventKind_Claimed(
          dco_decode_box_autoadd_claimed_event(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DisplaySetting dco_decode_display_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DisplaySetting.values[raw as int];
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FedimintGateway dco_decode_fedimint_gateway(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return FedimintGateway(
      endpoint: dco_decode_String(arr[0]),
      baseRoutingFee: dco_decode_u_64(arr[1]),
      ppmRoutingFee: dco_decode_u_64(arr[2]),
      baseTransactionFee: dco_decode_u_64(arr[3]),
      ppmTransactionFee: dco_decode_u_64(arr[4]),
      lightningAlias: dco_decode_opt_String(arr[5]),
      lightningNode: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  Guardian dco_decode_guardian(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Guardian(
      name: dco_decode_String(arr[0]),
      version: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InvoicePaidEvent dco_decode_invoice_paid_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return InvoicePaidEvent(amountMsats: dco_decode_u_64(arr[0]));
  }

  @protected
  LightningEventKind dco_decode_lightning_event_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LightningEventKind_InvoicePaid(
          dco_decode_box_autoadd_invoice_paid_event(raw[1]),
        );
      case 1:
        return LightningEventKind_PaymentSent();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LightningSendOutcome dco_decode_lightning_send_outcome(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LightningSendOutcome_Success(dco_decode_String(raw[1]));
      case 1:
        return LightningSendOutcome_Failure();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<PublicFederation>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<FedimintGateway> dco_decode_list_fedimint_gateway(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_fedimint_gateway).toList();
  }

  @protected
  List<Guardian> dco_decode_list_guardian(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_guardian).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(FederationSelector, bool)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
        )
        .toList();
  }

  @protected
  List<(FederationSelector, NWCConnectionInfo)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info,
        )
        .toList();
  }

  @protected
  List<(String, bool)> dco_decode_list_record_string_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_bool).toList();
  }

  @protected
  List<(String, BigInt, BigInt?)>
  dco_decode_list_record_string_u_64_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_u_64_opt_box_autoadd_u_64)
        .toList();
  }

  @protected
  List<(BigInt, BigInt)> dco_decode_list_record_u_64_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_u_64_usize).toList();
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  List<Utxo> dco_decode_list_utxo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_utxo).toList();
  }

  @protected
  LNAddressStatus dco_decode_ln_address_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LNAddressStatus_Registered(lnurl: dco_decode_String(raw[1]));
      case 1:
        return LNAddressStatus_Available();
      case 2:
        return LNAddressStatus_CurrentConfig();
      case 3:
        return LNAddressStatus_UnsupportedFederation();
      case 4:
        return LNAddressStatus_Invalid();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LogLevel dco_decode_log_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogLevel.values[raw as int];
  }

  @protected
  MempoolEvent dco_decode_mempool_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MempoolEvent(
      amount: dco_decode_u_64(arr[0]),
      outpoint: dco_decode_String(arr[1]),
    );
  }

  @protected
  MultimintCreation dco_decode_multimint_creation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MultimintCreation_New();
      case 1:
        return MultimintCreation_LoadExisting();
      case 2:
        return MultimintCreation_NewFromMnemonic(
          words: dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MultimintEvent dco_decode_multimint_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MultimintEvent_Deposit(
          dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
            raw[1],
          ),
        );
      case 1:
        return MultimintEvent_Lightning(
          dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
            raw[1],
          ),
        );
      case 2:
        return MultimintEvent_Log(
          dco_decode_log_level(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 3:
        return MultimintEvent_RecoveryDone(dco_decode_String(raw[1]));
      case 4:
        return MultimintEvent_RecoveryProgress(
          dco_decode_String(raw[1]),
          dco_decode_u_16(raw[2]),
          dco_decode_u_32(raw[3]),
          dco_decode_u_32(raw[4]),
        );
      case 5:
        return MultimintEvent_Ecash(
          dco_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
            raw[1],
          ),
        );
      case 6:
        return MultimintEvent_NostrRecovery(
          dco_decode_String(raw[1]),
          dco_decode_u_16(raw[2]),
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            raw[3],
          ),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  NWCConnectionInfo dco_decode_nwc_connection_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NWCConnectionInfo(
      publicKey: dco_decode_String(arr[0]),
      relay: dco_decode_String(arr[1]),
      secret: dco_decode_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  FederationId?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
          raw,
        );
  }

  @protected
  FederationSelector?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          raw,
        );
  }

  @protected
  LightningAddressConfig?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
          raw,
        );
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  ParsedText dco_decode_parsed_text(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ParsedText_InviteCode(dco_decode_String(raw[1]));
      case 1:
        return ParsedText_InviteCodeWithEcash(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 2:
        return ParsedText_LightningInvoice(dco_decode_String(raw[1]));
      case 3:
        return ParsedText_BitcoinAddress(
          dco_decode_String(raw[1]),
          dco_decode_opt_box_autoadd_u_64(raw[2]),
        );
      case 4:
        return ParsedText_Ecash(dco_decode_u_64(raw[1]));
      case 5:
        return ParsedText_LightningAddressOrLnurl(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PaymentPreview dco_decode_payment_preview(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return PaymentPreview(
      amountMsats: dco_decode_u_64(arr[0]),
      paymentHash: dco_decode_String(arr[1]),
      network: dco_decode_String(arr[2]),
      invoice: dco_decode_String(arr[3]),
      gateway: dco_decode_String(arr[4]),
      amountWithFees: dco_decode_u_64(arr[5]),
      isLnv2: dco_decode_bool(arr[6]),
    );
  }

  @protected
  (Bolt11Invoice, OperationId)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[1],
      ),
    );
  }

  @protected
  (FederationId, DepositEventKind)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
        arr[0],
      ),
      dco_decode_deposit_event_kind(arr[1]),
    );
  }

  @protected
  (FederationId, LightningEventKind)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
        arr[0],
      ),
      dco_decode_lightning_event_kind(arr[1]),
    );
  }

  @protected
  (FederationId, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
        arr[0],
      ),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (FederationSelector, bool)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[0],
      ),
      dco_decode_bool(arr[1]),
    );
  }

  @protected
  (FederationSelector, NWCConnectionInfo)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[0],
      ),
      dco_decode_nwc_connection_info(arr[1]),
    );
  }

  @protected
  (FinalReceiveOperationState, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_final_receive_operation_state_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
        arr[0],
      ),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (OperationId, String, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[0],
      ),
      dco_decode_String(arr[1]),
      dco_decode_u_64(arr[2]),
    );
  }

  @protected
  (ReissueExternalNotesState, BigInt?)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_reissue_external_notes_state_opt_box_autoadd_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
        arr[0],
      ),
      dco_decode_opt_box_autoadd_u_64(arr[1]),
    );
  }

  @protected
  (ParsedText, FederationSelector)
  dco_decode_record_parsed_text_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_parsed_text(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[1],
      ),
    );
  }

  @protected
  (ParsedText, FederationSelector?)
  dco_decode_record_parsed_text_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_parsed_text(arr[0]),
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[1],
      ),
    );
  }

  @protected
  (String, OperationId, String, String, BigInt)
  dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) {
      throw Exception('Expected 5 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[1],
      ),
      dco_decode_String(arr[2]),
      dco_decode_String(arr[3]),
      dco_decode_u_64(arr[4]),
    );
  }

  @protected
  (String, bool) dco_decode_record_string_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_bool(arr[1]));
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  (String, BigInt, bool) dco_decode_record_string_u_64_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
      dco_decode_bool(arr[2]),
    );
  }

  @protected
  (String, BigInt, BigInt?) dco_decode_record_string_u_64_opt_box_autoadd_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
      dco_decode_opt_box_autoadd_u_64(arr[2]),
    );
  }

  @protected
  (int, int) dco_decode_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_u_32(arr[0]), dco_decode_u_32(arr[1]));
  }

  @protected
  (BigInt, BigInt) dco_decode_record_u_64_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_u_64(arr[0]), dco_decode_usize(arr[1]));
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Transaction(
      kind: dco_decode_transaction_kind(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      timestamp: dco_decode_u_64(arr[2]),
      operationId: dco_decode_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  TransactionKind dco_decode_transaction_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TransactionKind_LightningReceive(
          fees: dco_decode_u_64(raw[1]),
          gateway: dco_decode_String(raw[2]),
          payeePubkey: dco_decode_String(raw[3]),
          paymentHash: dco_decode_String(raw[4]),
        );
      case 1:
        return TransactionKind_LightningSend(
          fees: dco_decode_u_64(raw[1]),
          gateway: dco_decode_String(raw[2]),
          paymentHash: dco_decode_String(raw[3]),
          preimage: dco_decode_String(raw[4]),
          lnAddress: dco_decode_opt_String(raw[5]),
        );
      case 2:
        return TransactionKind_LightningRecurring();
      case 3:
        return TransactionKind_OnchainReceive(
          address: dco_decode_String(raw[1]),
          txid: dco_decode_String(raw[2]),
        );
      case 4:
        return TransactionKind_OnchainSend(
          address: dco_decode_String(raw[1]),
          txid: dco_decode_String(raw[2]),
          feeRateSatsPerVb: dco_decode_opt_box_autoadd_f_64(raw[3]),
          txSizeVb: dco_decode_opt_box_autoadd_u_32(raw[4]),
          feeSats: dco_decode_opt_box_autoadd_u_64(raw[5]),
          totalSats: dco_decode_opt_box_autoadd_u_64(raw[6]),
        );
      case 5:
        return TransactionKind_EcashReceive(
          oobNotes: dco_decode_String(raw[1]),
          fees: dco_decode_u_64(raw[2]),
        );
      case 6:
        return TransactionKind_EcashSend(
          oobNotes: dco_decode_String(raw[1]),
          fees: dco_decode_u_64(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Utxo dco_decode_utxo(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Utxo(
      txid: dco_decode_String(arr[0]),
      index: dco_decode_u_32(arr[1]),
      amount: dco_decode_u_64(arr[2]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Amount
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bolt11Invoice
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Database
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EventBusMultimintEvent
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBusMultimintEventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationMeta
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationMetaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PegOutFees
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PegOutFeesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecoveryProgress
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecoveryProgressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReissueExternalNotesState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SafeUrl
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SafeUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SpendOobState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WithdrawFeesResponse
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationMeta
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationMetaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressConfig
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressKey
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WithdrawFeesResponse
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationMeta
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationMetaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OobNotes
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OobNotesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WithdrawFeesResponse
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Amount
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bolt11Invoice
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Database
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EventBusMultimintEvent
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EventBusMultimintEventImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationMeta
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationMetaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  LightningAddressKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LightningAddressKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OobNotes
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OobNotesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PegOutFees
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PegOutFeesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RecoveryProgress
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RecoveryProgressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReissueExternalNotesState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SafeUrl
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SafeUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SpendOobState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  WithdrawFeesResponse
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawFeesResponseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<DepositEventKind> sse_decode_StreamSink_deposit_event_kind_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MultimintEvent> sse_decode_StreamSink_multimint_event_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<(int, int)> sse_decode_StreamSink_record_u_32_u_32_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AwaitingConfsEvent sse_decode_awaiting_confs_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_u_64(deserializer);
    var var_outpoint = sse_decode_String(deserializer);
    var var_blockHeight = sse_decode_u_64(deserializer);
    var var_needed = sse_decode_u_64(deserializer);
    return AwaitingConfsEvent(
      amount: var_amount,
      outpoint: var_outpoint,
      blockHeight: var_blockHeight,
      needed: var_needed,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FederationId
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      deserializer,
    ));
  }

  @protected
  FederationSelector
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      deserializer,
    ));
  }

  @protected
  LightningAddressConfig
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
      deserializer,
    ));
  }

  @protected
  AwaitingConfsEvent sse_decode_box_autoadd_awaiting_confs_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_awaiting_confs_event(deserializer));
  }

  @protected
  ClaimedEvent sse_decode_box_autoadd_claimed_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_claimed_event(deserializer));
  }

  @protected
  ConfirmedEvent sse_decode_box_autoadd_confirmed_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_confirmed_event(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  InvoicePaidEvent sse_decode_box_autoadd_invoice_paid_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_invoice_paid_event(deserializer));
  }

  @protected
  MempoolEvent sse_decode_box_autoadd_mempool_event(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mempool_event(deserializer));
  }

  @protected
  MultimintCreation sse_decode_box_autoadd_multimint_creation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_multimint_creation(deserializer));
  }

  @protected
  (FederationId, DepositEventKind)
  sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
      deserializer,
    ));
  }

  @protected
  (FederationId, LightningEventKind)
  sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
      deserializer,
    ));
  }

  @protected
  (FederationId, BigInt)
  sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
      deserializer,
    ));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ClaimedEvent sse_decode_claimed_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_u_64(deserializer);
    var var_outpoint = sse_decode_String(deserializer);
    return ClaimedEvent(amount: var_amount, outpoint: var_outpoint);
  }

  @protected
  ConfirmedEvent sse_decode_confirmed_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_u_64(deserializer);
    var var_outpoint = sse_decode_String(deserializer);
    return ConfirmedEvent(amount: var_amount, outpoint: var_outpoint);
  }

  @protected
  DepositEventKind sse_decode_deposit_event_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_mempool_event(deserializer);
        return DepositEventKind_Mempool(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_awaiting_confs_event(
          deserializer,
        );
        return DepositEventKind_AwaitingConfs(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_confirmed_event(deserializer);
        return DepositEventKind_Confirmed(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_claimed_event(deserializer);
        return DepositEventKind_Claimed(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DisplaySetting sse_decode_display_setting(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DisplaySetting.values[inner];
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FedimintGateway sse_decode_fedimint_gateway(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_endpoint = sse_decode_String(deserializer);
    var var_baseRoutingFee = sse_decode_u_64(deserializer);
    var var_ppmRoutingFee = sse_decode_u_64(deserializer);
    var var_baseTransactionFee = sse_decode_u_64(deserializer);
    var var_ppmTransactionFee = sse_decode_u_64(deserializer);
    var var_lightningAlias = sse_decode_opt_String(deserializer);
    var var_lightningNode = sse_decode_opt_String(deserializer);
    return FedimintGateway(
      endpoint: var_endpoint,
      baseRoutingFee: var_baseRoutingFee,
      ppmRoutingFee: var_ppmRoutingFee,
      baseTransactionFee: var_baseTransactionFee,
      ppmTransactionFee: var_ppmTransactionFee,
      lightningAlias: var_lightningAlias,
      lightningNode: var_lightningNode,
    );
  }

  @protected
  Guardian sse_decode_guardian(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_opt_String(deserializer);
    return Guardian(name: var_name, version: var_version);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InvoicePaidEvent sse_decode_invoice_paid_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountMsats = sse_decode_u_64(deserializer);
    return InvoicePaidEvent(amountMsats: var_amountMsats);
  }

  @protected
  LightningEventKind sse_decode_lightning_event_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_invoice_paid_event(
          deserializer,
        );
        return LightningEventKind_InvoicePaid(var_field0);
      case 1:
        return LightningEventKind_PaymentSent();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LightningSendOutcome sse_decode_lightning_send_outcome(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return LightningSendOutcome_Success(var_field0);
      case 1:
        return LightningSendOutcome_Failure();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<PublicFederation>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PublicFederation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<FedimintGateway> sse_decode_list_fedimint_gateway(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FedimintGateway>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_fedimint_gateway(deserializer));
    }
    return ans_;
  }

  @protected
  List<Guardian> sse_decode_list_guardian(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Guardian>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_guardian(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(FederationSelector, bool)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(FederationSelector, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<(FederationSelector, NWCConnectionInfo)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(FederationSelector, NWCConnectionInfo)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<(String, bool)> sse_decode_list_record_string_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, BigInt, BigInt?)>
  sse_decode_list_record_string_u_64_opt_box_autoadd_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, BigInt, BigInt?)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_string_u_64_opt_box_autoadd_u_64(deserializer),
      );
    }
    return ans_;
  }

  @protected
  List<(BigInt, BigInt)> sse_decode_list_record_u_64_usize(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_64_usize(deserializer));
    }
    return ans_;
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  List<Utxo> sse_decode_list_utxo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Utxo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_utxo(deserializer));
    }
    return ans_;
  }

  @protected
  LNAddressStatus sse_decode_ln_address_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_lnurl = sse_decode_String(deserializer);
        return LNAddressStatus_Registered(lnurl: var_lnurl);
      case 1:
        return LNAddressStatus_Available();
      case 2:
        return LNAddressStatus_CurrentConfig();
      case 3:
        return LNAddressStatus_UnsupportedFederation();
      case 4:
        return LNAddressStatus_Invalid();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogLevel.values[inner];
  }

  @protected
  MempoolEvent sse_decode_mempool_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_u_64(deserializer);
    var var_outpoint = sse_decode_String(deserializer);
    return MempoolEvent(amount: var_amount, outpoint: var_outpoint);
  }

  @protected
  MultimintCreation sse_decode_multimint_creation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return MultimintCreation_New();
      case 1:
        return MultimintCreation_LoadExisting();
      case 2:
        var var_words = sse_decode_list_String(deserializer);
        return MultimintCreation_NewFromMnemonic(words: var_words);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MultimintEvent sse_decode_multimint_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
              deserializer,
            );
        return MultimintEvent_Deposit(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
              deserializer,
            );
        return MultimintEvent_Lightning(var_field0);
      case 2:
        var var_field0 = sse_decode_log_level(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return MultimintEvent_Log(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return MultimintEvent_RecoveryDone(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_u_16(deserializer);
        var var_field2 = sse_decode_u_32(deserializer);
        var var_field3 = sse_decode_u_32(deserializer);
        return MultimintEvent_RecoveryProgress(
          var_field0,
          var_field1,
          var_field2,
          var_field3,
        );
      case 5:
        var var_field0 =
            sse_decode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
              deserializer,
            );
        return MultimintEvent_Ecash(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_u_16(deserializer);
        var var_field2 =
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
              deserializer,
            );
        return MultimintEvent_NostrRecovery(var_field0, var_field1, var_field2);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  NWCConnectionInfo sse_decode_nwc_connection_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_publicKey = sse_decode_String(deserializer);
    var var_relay = sse_decode_String(deserializer);
    var var_secret = sse_decode_String(deserializer);
    return NWCConnectionInfo(
      publicKey: var_publicKey,
      relay: var_relay,
      secret: var_secret,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FederationId?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  FederationSelector?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  LightningAddressConfig?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ParsedText sse_decode_parsed_text(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return ParsedText_InviteCode(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return ParsedText_InviteCodeWithEcash(var_field0, var_field1);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return ParsedText_LightningInvoice(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_u_64(deserializer);
        return ParsedText_BitcoinAddress(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_u_64(deserializer);
        return ParsedText_Ecash(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return ParsedText_LightningAddressOrLnurl(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PaymentPreview sse_decode_payment_preview(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountMsats = sse_decode_u_64(deserializer);
    var var_paymentHash = sse_decode_String(deserializer);
    var var_network = sse_decode_String(deserializer);
    var var_invoice = sse_decode_String(deserializer);
    var var_gateway = sse_decode_String(deserializer);
    var var_amountWithFees = sse_decode_u_64(deserializer);
    var var_isLnv2 = sse_decode_bool(deserializer);
    return PaymentPreview(
      amountMsats: var_amountMsats,
      paymentHash: var_paymentHash,
      network: var_network,
      invoice: var_invoice,
      gateway: var_gateway,
      amountWithFees: var_amountWithFees,
      isLnv2: var_isLnv2,
    );
  }

  @protected
  (Bolt11Invoice, OperationId)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (FederationId, DepositEventKind)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
          deserializer,
        );
    var var_field1 = sse_decode_deposit_event_kind(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (FederationId, LightningEventKind)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
          deserializer,
        );
    var var_field1 = sse_decode_lightning_event_kind(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (FederationId, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
          deserializer,
        );
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (FederationSelector, bool)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (FederationSelector, NWCConnectionInfo)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    var var_field1 = sse_decode_nwc_connection_info(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (FinalReceiveOperationState, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_final_receive_operation_state_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
          deserializer,
        );
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (OperationId, String, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (ReissueExternalNotesState, BigInt?)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_reissue_external_notes_state_opt_box_autoadd_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
          deserializer,
        );
    var var_field1 = sse_decode_opt_box_autoadd_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (ParsedText, FederationSelector)
  sse_decode_record_parsed_text_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_parsed_text(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (ParsedText, FederationSelector?)
  sse_decode_record_parsed_text_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_parsed_text(deserializer);
    var var_field1 =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, OperationId, String, String, BigInt)
  sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    var var_field2 = sse_decode_String(deserializer);
    var var_field3 = sse_decode_String(deserializer);
    var var_field4 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1, var_field2, var_field3, var_field4);
  }

  @protected
  (String, bool) sse_decode_record_string_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, BigInt, bool) sse_decode_record_string_u_64_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    var var_field2 = sse_decode_bool(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (String, BigInt, BigInt?) sse_decode_record_string_u_64_opt_box_autoadd_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    var var_field2 = sse_decode_opt_box_autoadd_u_64(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (int, int) sse_decode_record_u_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, BigInt) sse_decode_record_u_64_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_kind = sse_decode_transaction_kind(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_operationId = sse_decode_list_prim_u_8_strict(deserializer);
    return Transaction(
      kind: var_kind,
      amount: var_amount,
      timestamp: var_timestamp,
      operationId: var_operationId,
    );
  }

  @protected
  TransactionKind sse_decode_transaction_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_fees = sse_decode_u_64(deserializer);
        var var_gateway = sse_decode_String(deserializer);
        var var_payeePubkey = sse_decode_String(deserializer);
        var var_paymentHash = sse_decode_String(deserializer);
        return TransactionKind_LightningReceive(
          fees: var_fees,
          gateway: var_gateway,
          payeePubkey: var_payeePubkey,
          paymentHash: var_paymentHash,
        );
      case 1:
        var var_fees = sse_decode_u_64(deserializer);
        var var_gateway = sse_decode_String(deserializer);
        var var_paymentHash = sse_decode_String(deserializer);
        var var_preimage = sse_decode_String(deserializer);
        var var_lnAddress = sse_decode_opt_String(deserializer);
        return TransactionKind_LightningSend(
          fees: var_fees,
          gateway: var_gateway,
          paymentHash: var_paymentHash,
          preimage: var_preimage,
          lnAddress: var_lnAddress,
        );
      case 2:
        return TransactionKind_LightningRecurring();
      case 3:
        var var_address = sse_decode_String(deserializer);
        var var_txid = sse_decode_String(deserializer);
        return TransactionKind_OnchainReceive(
          address: var_address,
          txid: var_txid,
        );
      case 4:
        var var_address = sse_decode_String(deserializer);
        var var_txid = sse_decode_String(deserializer);
        var var_feeRateSatsPerVb = sse_decode_opt_box_autoadd_f_64(
          deserializer,
        );
        var var_txSizeVb = sse_decode_opt_box_autoadd_u_32(deserializer);
        var var_feeSats = sse_decode_opt_box_autoadd_u_64(deserializer);
        var var_totalSats = sse_decode_opt_box_autoadd_u_64(deserializer);
        return TransactionKind_OnchainSend(
          address: var_address,
          txid: var_txid,
          feeRateSatsPerVb: var_feeRateSatsPerVb,
          txSizeVb: var_txSizeVb,
          feeSats: var_feeSats,
          totalSats: var_totalSats,
        );
      case 5:
        var var_oobNotes = sse_decode_String(deserializer);
        var var_fees = sse_decode_u_64(deserializer);
        return TransactionKind_EcashReceive(
          oobNotes: var_oobNotes,
          fees: var_fees,
        );
      case 6:
        var var_oobNotes = sse_decode_String(deserializer);
        var var_fees = sse_decode_u_64(deserializer);
        return TransactionKind_EcashSend(
          oobNotes: var_oobNotes,
          fees: var_fees,
        );
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Utxo sse_decode_utxo(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_index = sse_decode_u_32(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    return Utxo(txid: var_txid, index: var_index, amount: var_amount);
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    Bolt11Invoice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Bolt11InvoiceImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    ClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    Database self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DatabaseImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    EventBusMultimintEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventBusMultimintEventImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    FederationMeta self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationMetaImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    LightningAddressKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    PegOutFees self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PegOutFeesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    RecoveryProgress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecoveryProgressImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    ReissueExternalNotesState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReissueExternalNotesStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SafeUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SafeUrlImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SpendOobState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SpendOobStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    WithdrawFeesResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WithdrawFeesResponseImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    FederationMeta self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationMetaImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    LightningAddressKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    WithdrawFeesResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WithdrawFeesResponseImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    FederationMeta self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationMetaImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    LightningAddressKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    OobNotes self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OobNotesImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    WithdrawFeesResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WithdrawFeesResponseImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    Bolt11Invoice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Bolt11InvoiceImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    ClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    Database self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DatabaseImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventBusMultimintEvent(
    EventBusMultimintEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EventBusMultimintEventImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationMeta(
    FederationMeta self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationMetaImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressKey(
    LightningAddressKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as LightningAddressKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOOBNotes(
    OobNotes self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OobNotesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPegOutFees(
    PegOutFees self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PegOutFeesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRecoveryProgress(
    RecoveryProgress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RecoveryProgressImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    ReissueExternalNotesState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReissueExternalNotesStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SafeUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SafeUrlImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SpendOobState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SpendOobStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdrawFeesResponse(
    WithdrawFeesResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as WithdrawFeesResponseImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_deposit_event_kind_Sse(
    RustStreamSink<DepositEventKind> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_deposit_event_kind,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_multimint_event_Sse(
    RustStreamSink<MultimintEvent> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_multimint_event,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_record_u_32_u_32_Sse(
    RustStreamSink<(int, int)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_u_32_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_awaiting_confs_event(
    AwaitingConfsEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.outpoint, serializer);
    sse_encode_u_64(self.blockHeight, serializer);
    sse_encode_u_64(self.needed, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_awaiting_confs_event(
    AwaitingConfsEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_awaiting_confs_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_claimed_event(
    ClaimedEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_claimed_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_confirmed_event(
    ConfirmedEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_confirmed_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_invoice_paid_event(
    InvoicePaidEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_invoice_paid_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mempool_event(
    MempoolEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mempool_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_multimint_creation(
    MultimintCreation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_multimint_creation(self, serializer);
  }

  @protected
  void
  sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    (FederationId, DepositEventKind) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    (FederationId, LightningEventKind) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    (FederationId, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_claimed_event(ClaimedEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.outpoint, serializer);
  }

  @protected
  void sse_encode_confirmed_event(
    ConfirmedEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.outpoint, serializer);
  }

  @protected
  void sse_encode_deposit_event_kind(
    DepositEventKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DepositEventKind_Mempool(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_mempool_event(field0, serializer);
      case DepositEventKind_AwaitingConfs(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_awaiting_confs_event(field0, serializer);
      case DepositEventKind_Confirmed(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_confirmed_event(field0, serializer);
      case DepositEventKind_Claimed(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_claimed_event(field0, serializer);
    }
  }

  @protected
  void sse_encode_display_setting(
    DisplaySetting self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fedimint_gateway(
    FedimintGateway self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.endpoint, serializer);
    sse_encode_u_64(self.baseRoutingFee, serializer);
    sse_encode_u_64(self.ppmRoutingFee, serializer);
    sse_encode_u_64(self.baseTransactionFee, serializer);
    sse_encode_u_64(self.ppmTransactionFee, serializer);
    sse_encode_opt_String(self.lightningAlias, serializer);
    sse_encode_opt_String(self.lightningNode, serializer);
  }

  @protected
  void sse_encode_guardian(Guardian self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.version, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_invoice_paid_event(
    InvoicePaidEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountMsats, serializer);
  }

  @protected
  void sse_encode_lightning_event_kind(
    LightningEventKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LightningEventKind_InvoicePaid(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_invoice_paid_event(field0, serializer);
      case LightningEventKind_PaymentSent():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_lightning_send_outcome(
    LightningSendOutcome self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LightningSendOutcome_Success(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case LightningSendOutcome_Failure():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    List<PublicFederation> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_fedimint_gateway(
    List<FedimintGateway> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_fedimint_gateway(item, serializer);
    }
  }

  @protected
  void sse_encode_list_guardian(List<Guardian> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_guardian(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    List<(FederationSelector, bool)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    List<(FederationSelector, NWCConnectionInfo)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_record_string_bool(
    List<(String, bool)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_u_64_opt_box_autoadd_u_64(
    List<(String, BigInt, BigInt?)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_u_64_opt_box_autoadd_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_64_usize(
    List<(BigInt, BigInt)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_64_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_transaction(
    List<Transaction> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_list_utxo(List<Utxo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_utxo(item, serializer);
    }
  }

  @protected
  void sse_encode_ln_address_status(
    LNAddressStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LNAddressStatus_Registered(lnurl: final lnurl):
        sse_encode_i_32(0, serializer);
        sse_encode_String(lnurl, serializer);
      case LNAddressStatus_Available():
        sse_encode_i_32(1, serializer);
      case LNAddressStatus_CurrentConfig():
        sse_encode_i_32(2, serializer);
      case LNAddressStatus_UnsupportedFederation():
        sse_encode_i_32(3, serializer);
      case LNAddressStatus_Invalid():
        sse_encode_i_32(4, serializer);
    }
  }

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mempool_event(MempoolEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.outpoint, serializer);
  }

  @protected
  void sse_encode_multimint_creation(
    MultimintCreation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MultimintCreation_New():
        sse_encode_i_32(0, serializer);
      case MultimintCreation_LoadExisting():
        sse_encode_i_32(1, serializer);
      case MultimintCreation_NewFromMnemonic(words: final words):
        sse_encode_i_32(2, serializer);
        sse_encode_list_String(words, serializer);
    }
  }

  @protected
  void sse_encode_multimint_event(
    MultimintEvent self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MultimintEvent_Deposit(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
          field0,
          serializer,
        );
      case MultimintEvent_Lightning(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
          field0,
          serializer,
        );
      case MultimintEvent_Log(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_log_level(field0, serializer);
        sse_encode_String(field1, serializer);
      case MultimintEvent_RecoveryDone(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case MultimintEvent_RecoveryProgress(
        field0: final field0,
        field1: final field1,
        field2: final field2,
        field3: final field3,
      ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_u_16(field1, serializer);
        sse_encode_u_32(field2, serializer);
        sse_encode_u_32(field3, serializer);
      case MultimintEvent_Ecash(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
          field0,
          serializer,
        );
      case MultimintEvent_NostrRecovery(
        field0: final field0,
        field1: final field1,
        field2: final field2,
      ):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_u_16(field1, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          field2,
          serializer,
        );
    }
  }

  @protected
  void sse_encode_nwc_connection_info(
    NWCConnectionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.publicKey, serializer);
    sse_encode_String(self.relay, serializer);
    sse_encode_String(self.secret, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
    LightningAddressConfig? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLightningAddressConfig(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_parsed_text(ParsedText self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ParsedText_InviteCode(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case ParsedText_InviteCodeWithEcash(
        field0: final field0,
        field1: final field1,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case ParsedText_LightningInvoice(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case ParsedText_BitcoinAddress(
        field0: final field0,
        field1: final field1,
      ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_opt_box_autoadd_u_64(field1, serializer);
      case ParsedText_Ecash(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_u_64(field0, serializer);
      case ParsedText_LightningAddressOrLnurl(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_payment_preview(
    PaymentPreview self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountMsats, serializer);
    sse_encode_String(self.paymentHash, serializer);
    sse_encode_String(self.network, serializer);
    sse_encode_String(self.invoice, serializer);
    sse_encode_String(self.gateway, serializer);
    sse_encode_u_64(self.amountWithFees, serializer);
    sse_encode_bool(self.isLnv2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    (Bolt11Invoice, OperationId) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_deposit_event_kind(
    (FederationId, DepositEventKind) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      self.$1,
      serializer,
    );
    sse_encode_deposit_event_kind(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_lightning_event_kind(
    (FederationId, LightningEventKind) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      self.$1,
      serializer,
    );
    sse_encode_lightning_event_kind(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_id_u_64(
    (FederationId, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
      self.$1,
      serializer,
    );
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    (FederationSelector, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$1,
      serializer,
    );
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_nwc_connection_info(
    (FederationSelector, NWCConnectionInfo) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$1,
      serializer,
    );
    sse_encode_nwc_connection_info(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_final_receive_operation_state_u_64(
    (FinalReceiveOperationState, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
      self.$1,
      serializer,
    );
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    (OperationId, String, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$1,
      serializer,
    );
    sse_encode_String(self.$2, serializer);
    sse_encode_u_64(self.$3, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_reissue_external_notes_state_opt_box_autoadd_u_64(
    (ReissueExternalNotesState, BigInt?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
      self.$1,
      serializer,
    );
    sse_encode_opt_box_autoadd_u_64(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_parsed_text_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    (ParsedText, FederationSelector) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_parsed_text(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_parsed_text_opt_box_autoadd_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    (ParsedText, FederationSelector?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_parsed_text(self.$1, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    (String, OperationId, String, String, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$2,
      serializer,
    );
    sse_encode_String(self.$3, serializer);
    sse_encode_String(self.$4, serializer);
    sse_encode_u_64(self.$5, serializer);
  }

  @protected
  void sse_encode_record_string_bool(
    (String, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_u_64_bool(
    (String, BigInt, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
    sse_encode_bool(self.$3, serializer);
  }

  @protected
  void sse_encode_record_string_u_64_opt_box_autoadd_u_64(
    (String, BigInt, BigInt?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
    sse_encode_opt_box_autoadd_u_64(self.$3, serializer);
  }

  @protected
  void sse_encode_record_u_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_64_usize(
    (BigInt, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_kind(self.kind, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_list_prim_u_8_strict(self.operationId, serializer);
  }

  @protected
  void sse_encode_transaction_kind(
    TransactionKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TransactionKind_LightningReceive(
        fees: final fees,
        gateway: final gateway,
        payeePubkey: final payeePubkey,
        paymentHash: final paymentHash,
      ):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(fees, serializer);
        sse_encode_String(gateway, serializer);
        sse_encode_String(payeePubkey, serializer);
        sse_encode_String(paymentHash, serializer);
      case TransactionKind_LightningSend(
        fees: final fees,
        gateway: final gateway,
        paymentHash: final paymentHash,
        preimage: final preimage,
        lnAddress: final lnAddress,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_64(fees, serializer);
        sse_encode_String(gateway, serializer);
        sse_encode_String(paymentHash, serializer);
        sse_encode_String(preimage, serializer);
        sse_encode_opt_String(lnAddress, serializer);
      case TransactionKind_LightningRecurring():
        sse_encode_i_32(2, serializer);
      case TransactionKind_OnchainReceive(
        address: final address,
        txid: final txid,
      ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(address, serializer);
        sse_encode_String(txid, serializer);
      case TransactionKind_OnchainSend(
        address: final address,
        txid: final txid,
        feeRateSatsPerVb: final feeRateSatsPerVb,
        txSizeVb: final txSizeVb,
        feeSats: final feeSats,
        totalSats: final totalSats,
      ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(address, serializer);
        sse_encode_String(txid, serializer);
        sse_encode_opt_box_autoadd_f_64(feeRateSatsPerVb, serializer);
        sse_encode_opt_box_autoadd_u_32(txSizeVb, serializer);
        sse_encode_opt_box_autoadd_u_64(feeSats, serializer);
        sse_encode_opt_box_autoadd_u_64(totalSats, serializer);
      case TransactionKind_EcashReceive(
        oobNotes: final oobNotes,
        fees: final fees,
      ):
        sse_encode_i_32(5, serializer);
        sse_encode_String(oobNotes, serializer);
        sse_encode_u_64(fees, serializer);
      case TransactionKind_EcashSend(
        oobNotes: final oobNotes,
        fees: final fees,
      ):
        sse_encode_i_32(6, serializer);
        sse_encode_String(oobNotes, serializer);
        sse_encode_u_64(fees, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_utxo(Utxo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.index, serializer);
    sse_encode_u_64(self.amount, serializer);
  }
}

@sealed
class AmountImpl extends RustOpaque implements Amount {
  // Not to be used by end users
  AmountImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AmountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Amount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Amount,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AmountPtr,
  );
}

@sealed
class Bolt11InvoiceImpl extends RustOpaque implements Bolt11Invoice {
  // Not to be used by end users
  Bolt11InvoiceImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Bolt11InvoiceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Bolt11Invoice,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bolt11Invoice,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bolt11InvoicePtr,
  );
}

@sealed
class ClientConfigImpl extends RustOpaque implements ClientConfig {
  // Not to be used by end users
  ClientConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfigPtr,
  );
}

@sealed
class ConnectorImpl extends RustOpaque implements Connector {
  // Not to be used by end users
  ConnectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Connector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Connector,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConnectorPtr,
  );
}

@sealed
class DatabaseImpl extends RustOpaque implements Database {
  // Not to be used by end users
  DatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Database,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Database,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DatabasePtr,
  );
}

@sealed
class EventBusMultimintEventImpl extends RustOpaque
    implements EventBusMultimintEvent {
  // Not to be used by end users
  EventBusMultimintEventImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EventBusMultimintEventImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_EventBusMultimintEvent,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EventBusMultimintEvent,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_EventBusMultimintEventPtr,
  );
}

@sealed
class FederationConfigImpl extends RustOpaque implements FederationConfig {
  // Not to be used by end users
  FederationConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationConfig,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationConfigPtr,
  );

  ClientConfig get clientConfig => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetClientConfig(that: this);

  Connector get connector => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetConnector(that: this);

  String get federationName => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetFederationName(that: this);

  String? get network => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetNetwork(that: this);

  set clientConfig(ClientConfig clientConfig) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetClientConfig(
        that: this,
        clientConfig: clientConfig,
      );

  set connector(Connector connector) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetConnector(
        that: this,
        connector: connector,
      );

  set federationName(String federationName) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set network(String? network) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetNetwork(
        that: this,
        network: network,
      );
}

@sealed
class FederationIdImpl extends RustOpaque implements FederationId {
  // Not to be used by end users
  FederationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationIdPtr,
  );
}

@sealed
class FederationMetaImpl extends RustOpaque implements FederationMeta {
  // Not to be used by end users
  FederationMetaImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationMetaImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationMeta,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationMeta,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationMetaPtr,
  );

  List<Guardian> get guardians => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetGuardians(that: this);

  BigInt get lastUpdated => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetLastUpdated(that: this);

  String? get lnaddressApi => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetLnaddressApi(that: this);

  String? get picture => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetPicture(that: this);

  String? get recurringdApi => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetRecurringdApi(that: this);

  FederationSelector get selector => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetSelector(that: this);

  String? get welcome => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorGetWelcome(that: this);

  set guardians(List<Guardian> guardians) =>
      RustLib.instance.api.crateMultimintFederationMetaAutoAccessorSetGuardians(
        that: this,
        guardians: guardians,
      );

  set lastUpdated(BigInt lastUpdated) => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorSetLastUpdated(
        that: this,
        lastUpdated: lastUpdated,
      );

  set lnaddressApi(String? lnaddressApi) => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorSetLnaddressApi(
        that: this,
        lnaddressApi: lnaddressApi,
      );

  set picture(String? picture) =>
      RustLib.instance.api.crateMultimintFederationMetaAutoAccessorSetPicture(
        that: this,
        picture: picture,
      );

  set recurringdApi(String? recurringdApi) => RustLib.instance.api
      .crateMultimintFederationMetaAutoAccessorSetRecurringdApi(
        that: this,
        recurringdApi: recurringdApi,
      );

  set selector(FederationSelector selector) =>
      RustLib.instance.api.crateMultimintFederationMetaAutoAccessorSetSelector(
        that: this,
        selector: selector,
      );

  set welcome(String? welcome) =>
      RustLib.instance.api.crateMultimintFederationMetaAutoAccessorSetWelcome(
        that: this,
        welcome: welcome,
      );
}

@sealed
class FederationSelectorImpl extends RustOpaque implements FederationSelector {
  // Not to be used by end users
  FederationSelectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationSelectorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationSelector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationSelector,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationSelectorPtr,
  );

  FederationId get federationId => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetFederationId(that: this);

  String get federationName => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetFederationName(
        that: this,
      );

  String? get network => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetNetwork(that: this);

  set federationId(FederationId federationId) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );

  set federationName(String federationName) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set network(String? network) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetNetwork(
        that: this,
        network: network,
      );
}

@sealed
class FinalReceiveOperationStateImpl extends RustOpaque
    implements FinalReceiveOperationState {
  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr,
  );
}

@sealed
class LightningAddressConfigImpl extends RustOpaque
    implements LightningAddressConfig {
  // Not to be used by end users
  LightningAddressConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LightningAddressConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_LightningAddressConfig,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_LightningAddressConfig,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_LightningAddressConfigPtr,
  );

  String get authenticationToken => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetAuthenticationToken(
        that: this,
      );

  String get domain => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetDomain(that: this);

  SafeUrl get lnAddressApi => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetLnAddressApi(that: this);

  String get lnurl => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetLnurl(that: this);

  SafeUrl get recurringdApi => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetRecurringdApi(that: this);

  String get username => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorGetUsername(that: this);

  set authenticationToken(String authenticationToken) => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorSetAuthenticationToken(
        that: this,
        authenticationToken: authenticationToken,
      );

  set domain(String domain) =>
      RustLib.instance.api.crateDbLightningAddressConfigAutoAccessorSetDomain(
        that: this,
        domain: domain,
      );

  set lnAddressApi(SafeUrl lnAddressApi) => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorSetLnAddressApi(
        that: this,
        lnAddressApi: lnAddressApi,
      );

  set lnurl(String lnurl) =>
      RustLib.instance.api.crateDbLightningAddressConfigAutoAccessorSetLnurl(
        that: this,
        lnurl: lnurl,
      );

  set recurringdApi(SafeUrl recurringdApi) => RustLib.instance.api
      .crateDbLightningAddressConfigAutoAccessorSetRecurringdApi(
        that: this,
        recurringdApi: recurringdApi,
      );

  set username(String username) =>
      RustLib.instance.api.crateDbLightningAddressConfigAutoAccessorSetUsername(
        that: this,
        username: username,
      );
}

@sealed
class LightningAddressKeyImpl extends RustOpaque
    implements LightningAddressKey {
  // Not to be used by end users
  LightningAddressKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LightningAddressKeyImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_LightningAddressKey,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_LightningAddressKey,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_LightningAddressKeyPtr,
  );

  FederationId get federationId => RustLib.instance.api
      .crateDbLightningAddressKeyAutoAccessorGetFederationId(that: this);

  set federationId(FederationId federationId) => RustLib.instance.api
      .crateDbLightningAddressKeyAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );
}

@sealed
class MultimintImpl extends RustOpaque implements Multimint {
  // Not to be used by end users
  MultimintImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MultimintImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Multimint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Multimint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultimintPtr,
  );

  Future<void> ackSeedPhrase() =>
      RustLib.instance.api.crateMultimintMultimintAckSeedPhrase(that: this);

  Future<String> allocateDepositAddress({required FederationId federationId}) =>
      RustLib.instance.api.crateMultimintMultimintAllocateDepositAddress(
        that: this,
        federationId: federationId,
      );

  Future<(ReissueExternalNotesState, BigInt?)> awaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitEcashReissue(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<SpendOobState> awaitEcashSend({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitEcashSend(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<(FinalReceiveOperationState, BigInt)> awaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitReceive(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<LightningSendOutcome> awaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitSend(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<String> awaitWithdraw({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitWithdraw(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<BigInt> balance({required FederationId federationId}) => RustLib
      .instance
      .api
      .crateMultimintMultimintBalance(that: this, federationId: federationId);

  Future<WithdrawFeesResponse> calculateWithdrawFees({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
  }) => RustLib.instance.api.crateMultimintMultimintCalculateWithdrawFees(
    that: this,
    federationId: federationId,
    address: address,
    amountSats: amountSats,
  );

  Future<bool> checkEcashSpent({
    required FederationId federationId,
    required String ecash,
  }) => RustLib.instance.api.crateMultimintMultimintCheckEcashSpent(
    that: this,
    federationId: federationId,
    ecash: ecash,
  );

  Future<LNAddressStatus> checkLnAddressAvailability({
    required String username,
    required String domain,
    required String lnAddressApi,
    required String recurringdApi,
    required FederationId federationId,
  }) => RustLib.instance.api.crateMultimintMultimintCheckLnAddressAvailability(
    that: this,
    username: username,
    domain: domain,
    lnAddressApi: lnAddressApi,
    recurringdApi: recurringdApi,
    federationId: federationId,
  );

  Future<bool> containsClient({required FederationId federationId}) =>
      RustLib.instance.api.crateMultimintMultimintContainsClient(
        that: this,
        federationId: federationId,
      );

  Future<List<(FederationSelector, bool)>> federations() =>
      RustLib.instance.api.crateMultimintMultimintFederations(that: this);

  Future<List<(String, BigInt, BigInt?)>> getAddresses({
    required FederationId federationId,
  }) => RustLib.instance.api.crateMultimintMultimintGetAddresses(
    that: this,
    federationId: federationId,
  );

  Future<List<String>> getAllInviteCodes() =>
      RustLib.instance.api.crateMultimintMultimintGetAllInviteCodes(that: this);

  Future<BigInt?> getBtcPrice() =>
      RustLib.instance.api.crateMultimintMultimintGetBtcPrice(that: this);

  Future<FederationMeta> getCachedFederationMeta({
    String? invite,
    FederationId? federationId,
  }) => RustLib.instance.api.crateMultimintMultimintGetCachedFederationMeta(
    that: this,
    invite: invite,
    federationId: federationId,
  );

  Future<DisplaySetting> getDisplaySetting() =>
      RustLib.instance.api.crateMultimintMultimintGetDisplaySetting(that: this);

  Future<String> getInviteCode({
    required FederationId federationId,
    required int peer,
  }) => RustLib.instance.api.crateMultimintMultimintGetInviteCode(
    that: this,
    federationId: federationId,
    peer: peer,
  );

  /// Retreives currently configured Lightning Address
  Future<LightningAddressConfig?> getLnAddressConfig({
    required FederationId federationId,
  }) => RustLib.instance.api.crateMultimintMultimintGetLnAddressConfig(
    that: this,
    federationId: federationId,
  );

  Future<BigInt> getMaxWithdrawableAmount({
    required FederationId federationId,
    required String address,
  }) => RustLib.instance.api.crateMultimintMultimintGetMaxWithdrawableAmount(
    that: this,
    federationId: federationId,
    address: address,
  );

  Future<List<String>> getMnemonic() =>
      RustLib.instance.api.crateMultimintMultimintGetMnemonic(that: this);

  Future<List<(BigInt, BigInt)>> getNoteSummary({
    required FederationId federationId,
  }) => RustLib.instance.api.crateMultimintMultimintGetNoteSummary(
    that: this,
    federationId: federationId,
  );

  Future<RecoveryProgress> getRecoveryProgress({
    required FederationId federationId,
    required int moduleId,
  }) => RustLib.instance.api.crateMultimintMultimintGetRecoveryProgress(
    that: this,
    federationId: federationId,
    moduleId: moduleId,
  );

  Future<bool> hasSeedPhraseAck() =>
      RustLib.instance.api.crateMultimintMultimintHasSeedPhraseAck(that: this);

  Future<FederationSelector> joinFederation({
    required String invite,
    required bool recover,
  }) => RustLib.instance.api.crateMultimintMultimintJoinFederation(
    that: this,
    invite: invite,
    recover: recover,
  );

  Future<void> leaveFederation({required FederationId federationId}) =>
      RustLib.instance.api.crateMultimintMultimintLeaveFederation(
        that: this,
        federationId: federationId,
      );

  Future<List<FedimintGateway>> listGateways({
    required FederationId federationId,
  }) => RustLib.instance.api.crateMultimintMultimintListGateways(
    that: this,
    federationId: federationId,
  );

  Future<void> monitorDepositAddress({
    required FederationId federationId,
    required String address,
  }) => RustLib.instance.api.crateMultimintMultimintMonitorDepositAddress(
    that: this,
    federationId: federationId,
    address: address,
  );

  Future<BigInt> parseEcash({
    required FederationId federationId,
    required OobNotes notes,
  }) => RustLib.instance.api.crateMultimintMultimintParseEcash(
    that: this,
    federationId: federationId,
    notes: notes,
  );

  Future<(Bolt11Invoice, OperationId)> receive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  }) => RustLib.instance.api.crateMultimintMultimintReceive(
    that: this,
    federationId: federationId,
    amountMsatsWithFees: amountMsatsWithFees,
    amountMsatsWithoutFees: amountMsatsWithoutFees,
    gateway: gateway,
    isLnv2: isLnv2,
  );

  Future<void> recheckAddress({
    required FederationId federationId,
    required BigInt tweakIdx,
  }) => RustLib.instance.api.crateMultimintMultimintRecheckAddress(
    that: this,
    federationId: federationId,
    tweakIdx: tweakIdx,
  );

  /// Register LNURL/LN Address
  Future<void> registerLnAddress({
    required FederationId federationId,
    required String recurringdApi,
    required String lnAddressApi,
    required String username,
    required String domain,
  }) => RustLib.instance.api.crateMultimintMultimintRegisterLnAddress(
    that: this,
    federationId: federationId,
    recurringdApi: recurringdApi,
    lnAddressApi: lnAddressApi,
    username: username,
    domain: domain,
  );

  Future<OperationId> reissueEcash({
    required FederationId federationId,
    required String ecash,
  }) => RustLib.instance.api.crateMultimintMultimintReissueEcash(
    that: this,
    federationId: federationId,
    ecash: ecash,
  );

  Future<void> rejoinFromBackupInvites({
    required List<String> backupInviteCodes,
  }) => RustLib.instance.api.crateMultimintMultimintRejoinFromBackupInvites(
    that: this,
    backupInviteCodes: backupInviteCodes,
  );

  Future<(String, BigInt, bool)> selectReceiveGateway({
    required FederationId federationId,
    required Amount amount,
  }) => RustLib.instance.api.crateMultimintMultimintSelectReceiveGateway(
    that: this,
    federationId: federationId,
    amount: amount,
  );

  Future<(String, BigInt, bool)> selectSendGateway({
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  }) => RustLib.instance.api.crateMultimintMultimintSelectSendGateway(
    that: this,
    federationId: federationId,
    amount: amount,
    bolt11: bolt11,
  );

  Future<OperationId> send({
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
    required BigInt amountWithFees,
    String? lnAddress,
  }) => RustLib.instance.api.crateMultimintMultimintSend(
    that: this,
    federationId: federationId,
    invoice: invoice,
    gateway: gateway,
    isLnv2: isLnv2,
    amountWithFees: amountWithFees,
    lnAddress: lnAddress,
  );

  Future<(OperationId, String, BigInt)> sendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  }) => RustLib.instance.api.crateMultimintMultimintSendEcash(
    that: this,
    federationId: federationId,
    amountMsats: amountMsats,
  );

  Future<void> setDisplaySetting({required DisplaySetting displaySetting}) =>
      RustLib.instance.api.crateMultimintMultimintSetDisplaySetting(
        that: this,
        displaySetting: displaySetting,
      );

  Future<List<Transaction>> transactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) => RustLib.instance.api.crateMultimintMultimintTransactions(
    that: this,
    federationId: federationId,
    timestamp: timestamp,
    operationId: operationId,
    modules: modules,
  );

  Future<List<Utxo>> walletSummary({
    String? invite,
    FederationId? federationId,
  }) => RustLib.instance.api.crateMultimintMultimintWalletSummary(
    that: this,
    invite: invite,
    federationId: federationId,
  );

  Future<OperationId> withdrawToAddress({
    required FederationId federationId,
    required String address,
    required BigInt amountSats,
    required PegOutFees pegOutFees,
  }) => RustLib.instance.api.crateMultimintMultimintWithdrawToAddress(
    that: this,
    federationId: federationId,
    address: address,
    amountSats: amountSats,
    pegOutFees: pegOutFees,
  );
}

@sealed
class NostrClientImpl extends RustOpaque implements NostrClient {
  // Not to be used by end users
  NostrClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NostrClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NostrClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NostrClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NostrClientPtr,
  );

  Future<void> backupInviteCodes({required List<String> inviteCodes}) =>
      RustLib.instance.api.crateNostrNostrClientBackupInviteCodes(
        that: this,
        inviteCodes: inviteCodes,
      );

  Future<List<String>> getBackupInviteCodes() => RustLib.instance.api
      .crateNostrNostrClientGetBackupInviteCodes(that: this);

  Future<List<(FederationSelector, NWCConnectionInfo)>>
  getNwcConnectionInfo() => RustLib.instance.api
      .crateNostrNostrClientGetNwcConnectionInfo(that: this);

  Future<List<PublicFederation>> getPublicFederations({
    required bool forceUpdate,
  }) => RustLib.instance.api.crateNostrNostrClientGetPublicFederations(
    that: this,
    forceUpdate: forceUpdate,
  );

  Future<List<(String, bool)>> getRelays() =>
      RustLib.instance.api.crateNostrNostrClientGetRelays(that: this);

  Future<void> insertRelay({required String relayUri}) => RustLib.instance.api
      .crateNostrNostrClientInsertRelay(that: this, relayUri: relayUri);

  Future<void> removeRelay({required String relayUri}) => RustLib.instance.api
      .crateNostrNostrClientRemoveRelay(that: this, relayUri: relayUri);

  Future<NWCConnectionInfo> setNwcConnectionInfo({
    required FederationId federationId,
    required String relay,
  }) => RustLib.instance.api.crateNostrNostrClientSetNwcConnectionInfo(
    that: this,
    federationId: federationId,
    relay: relay,
  );
}

@sealed
class OobNotesImpl extends RustOpaque implements OobNotes {
  // Not to be used by end users
  OobNotesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OobNotesImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OobNotes,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OobNotes,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OobNotesPtr,
  );
}

@sealed
class OperationIdImpl extends RustOpaque implements OperationId {
  // Not to be used by end users
  OperationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OperationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OperationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationIdPtr,
  );
}

@sealed
class PegOutFeesImpl extends RustOpaque implements PegOutFees {
  // Not to be used by end users
  PegOutFeesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PegOutFeesImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PegOutFees,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PegOutFees,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PegOutFeesPtr,
  );
}

@sealed
class PublicFederationImpl extends RustOpaque implements PublicFederation {
  // Not to be used by end users
  PublicFederationImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicFederationImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PublicFederation,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicFederation,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_PublicFederationPtr,
  );

  String? get about => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetAbout(that: this);

  FederationId get federationId => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetFederationId(that: this);

  String get federationName => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetFederationName(that: this);

  List<String> get inviteCodes => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetInviteCodes(that: this);

  List<String> get modules => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetModules(that: this);

  String get network => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetNetwork(that: this);

  String? get picture => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetPicture(that: this);

  set about(String? about) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetAbout(that: this, about: about);

  set federationId(FederationId federationId) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );

  set federationName(String federationName) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set inviteCodes(List<String> inviteCodes) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetInviteCodes(
        that: this,
        inviteCodes: inviteCodes,
      );

  set modules(List<String> modules) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetModules(
        that: this,
        modules: modules,
      );

  set network(String network) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetNetwork(
        that: this,
        network: network,
      );

  set picture(String? picture) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetPicture(
        that: this,
        picture: picture,
      );
}

@sealed
class RecoveryProgressImpl extends RustOpaque implements RecoveryProgress {
  // Not to be used by end users
  RecoveryProgressImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RecoveryProgressImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RecoveryProgress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RecoveryProgress,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_RecoveryProgressPtr,
  );
}

@sealed
class ReissueExternalNotesStateImpl extends RustOpaque
    implements ReissueExternalNotesState {
  // Not to be used by end users
  ReissueExternalNotesStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReissueExternalNotesStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ReissueExternalNotesState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ReissueExternalNotesState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ReissueExternalNotesStatePtr,
  );
}

@sealed
class SafeUrlImpl extends RustOpaque implements SafeUrl {
  // Not to be used by end users
  SafeUrlImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SafeUrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SafeUrl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SafeUrl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SafeUrlPtr,
  );
}

@sealed
class SpendOobStateImpl extends RustOpaque implements SpendOobState {
  // Not to be used by end users
  SpendOobStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SpendOobStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SpendOobState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpendOobState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpendOobStatePtr,
  );
}

@sealed
class WithdrawFeesResponseImpl extends RustOpaque
    implements WithdrawFeesResponse {
  // Not to be used by end users
  WithdrawFeesResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WithdrawFeesResponseImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_WithdrawFeesResponse,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_WithdrawFeesResponse,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_WithdrawFeesResponsePtr,
  );

  BigInt get feeAmount => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorGetFeeAmount(that: this);

  double get feeRateSatsPerVb => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorGetFeeRateSatsPerVb(
        that: this,
      );

  PegOutFees get pegOutFees => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorGetPegOutFees(that: this);

  int get txSizeVbytes => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorGetTxSizeVbytes(
        that: this,
      );

  set feeAmount(BigInt feeAmount) => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorSetFeeAmount(
        that: this,
        feeAmount: feeAmount,
      );

  set feeRateSatsPerVb(double feeRateSatsPerVb) => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorSetFeeRateSatsPerVb(
        that: this,
        feeRateSatsPerVb: feeRateSatsPerVb,
      );

  set pegOutFees(PegOutFees pegOutFees) => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorSetPegOutFees(
        that: this,
        pegOutFees: pegOutFees,
      );

  set txSizeVbytes(int txSizeVbytes) => RustLib.instance.api
      .crateMultimintWithdrawFeesResponseAutoAccessorSetTxSizeVbytes(
        that: this,
        txSizeVbytes: txSizeVbytes,
      );
}
